
TempControlledFan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d14  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  00002d14  00002d88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000026f4  00000000  00000000  00002eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001243  00000000  00000000  000055a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  000067e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000214  00000000  00000000  000069a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002612  00000000  00000000  00006bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014ce  00000000  00000000  000091cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000130b  00000000  00000000  0000a69b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000b9a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000307  00000000  00000000  0000bb88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1a  00000000  00000000  0000be8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c8a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <main>
      7a:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ad e7       	ldi	r26, 0x7D	; 125
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 6d 16 	jmp	0x2cda	; 0x2cda <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 5d 16 	jmp	0x2cba	; 0x2cba <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 5d 16 	jmp	0x2cba	; 0x2cba <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8d e7       	ldi	r24, 0x7D	; 125
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 6d 16 	jmp	0x2cda	; 0x2cda <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6d e7       	ldi	r22, 0x7D	; 125
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 5d 16 	jmp	0x2cba	; 0x2cba <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 5d 16 	jmp	0x2cba	; 0x2cba <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 5d 16 	jmp	0x2cba	; 0x2cba <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 5a 16 	jmp	0x2cb4	; 0x2cb4 <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 61 16 	jmp	0x2cc2	; 0x2cc2 <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__epilogue_restores__+0x20>

000009fe <__floatunsisf>:
     9fe:	a8 e0       	ldi	r26, 0x08	; 8
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	e5 e0       	ldi	r30, 0x05	; 5
     a04:	f5 e0       	ldi	r31, 0x05	; 5
     a06:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__prologue_saves__+0x10>
     a0a:	7b 01       	movw	r14, r22
     a0c:	8c 01       	movw	r16, r24
     a0e:	61 15       	cp	r22, r1
     a10:	71 05       	cpc	r23, r1
     a12:	81 05       	cpc	r24, r1
     a14:	91 05       	cpc	r25, r1
     a16:	19 f4       	brne	.+6      	; 0xa1e <__floatunsisf+0x20>
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	60 c0       	rjmp	.+192    	; 0xade <__floatunsisf+0xe0>
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	8e e1       	ldi	r24, 0x1E	; 30
     a24:	c8 2e       	mov	r12, r24
     a26:	d1 2c       	mov	r13, r1
     a28:	dc 82       	std	Y+4, r13	; 0x04
     a2a:	cb 82       	std	Y+3, r12	; 0x03
     a2c:	ed 82       	std	Y+5, r14	; 0x05
     a2e:	fe 82       	std	Y+6, r15	; 0x06
     a30:	0f 83       	std	Y+7, r16	; 0x07
     a32:	18 87       	std	Y+8, r17	; 0x08
     a34:	c8 01       	movw	r24, r16
     a36:	b7 01       	movw	r22, r14
     a38:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     a3c:	fc 01       	movw	r30, r24
     a3e:	31 97       	sbiw	r30, 0x01	; 1
     a40:	f7 ff       	sbrs	r31, 7
     a42:	3b c0       	rjmp	.+118    	; 0xaba <__floatunsisf+0xbc>
     a44:	22 27       	eor	r18, r18
     a46:	33 27       	eor	r19, r19
     a48:	2e 1b       	sub	r18, r30
     a4a:	3f 0b       	sbc	r19, r31
     a4c:	57 01       	movw	r10, r14
     a4e:	68 01       	movw	r12, r16
     a50:	02 2e       	mov	r0, r18
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <__floatunsisf+0x5e>
     a54:	d6 94       	lsr	r13
     a56:	c7 94       	ror	r12
     a58:	b7 94       	ror	r11
     a5a:	a7 94       	ror	r10
     a5c:	0a 94       	dec	r0
     a5e:	d2 f7       	brpl	.-12     	; 0xa54 <__floatunsisf+0x56>
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e0       	ldi	r26, 0x00	; 0
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	04 c0       	rjmp	.+8      	; 0xa7a <__floatunsisf+0x7c>
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	aa 1f       	adc	r26, r26
     a78:	bb 1f       	adc	r27, r27
     a7a:	2a 95       	dec	r18
     a7c:	d2 f7       	brpl	.-12     	; 0xa72 <__floatunsisf+0x74>
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	a1 09       	sbc	r26, r1
     a82:	b1 09       	sbc	r27, r1
     a84:	8e 21       	and	r24, r14
     a86:	9f 21       	and	r25, r15
     a88:	a0 23       	and	r26, r16
     a8a:	b1 23       	and	r27, r17
     a8c:	00 97       	sbiw	r24, 0x00	; 0
     a8e:	a1 05       	cpc	r26, r1
     a90:	b1 05       	cpc	r27, r1
     a92:	21 f0       	breq	.+8      	; 0xa9c <__floatunsisf+0x9e>
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	4a 29       	or	r20, r10
     a9e:	5b 29       	or	r21, r11
     aa0:	6c 29       	or	r22, r12
     aa2:	7d 29       	or	r23, r13
     aa4:	4d 83       	std	Y+5, r20	; 0x05
     aa6:	5e 83       	std	Y+6, r21	; 0x06
     aa8:	6f 83       	std	Y+7, r22	; 0x07
     aaa:	78 87       	std	Y+8, r23	; 0x08
     aac:	8e e1       	ldi	r24, 0x1E	; 30
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	8e 1b       	sub	r24, r30
     ab2:	9f 0b       	sbc	r25, r31
     ab4:	9c 83       	std	Y+4, r25	; 0x04
     ab6:	8b 83       	std	Y+3, r24	; 0x03
     ab8:	12 c0       	rjmp	.+36     	; 0xade <__floatunsisf+0xe0>
     aba:	30 97       	sbiw	r30, 0x00	; 0
     abc:	81 f0       	breq	.+32     	; 0xade <__floatunsisf+0xe0>
     abe:	0e 2e       	mov	r0, r30
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <__floatunsisf+0xcc>
     ac2:	ee 0c       	add	r14, r14
     ac4:	ff 1c       	adc	r15, r15
     ac6:	00 1f       	adc	r16, r16
     ac8:	11 1f       	adc	r17, r17
     aca:	0a 94       	dec	r0
     acc:	d2 f7       	brpl	.-12     	; 0xac2 <__floatunsisf+0xc4>
     ace:	ed 82       	std	Y+5, r14	; 0x05
     ad0:	fe 82       	std	Y+6, r15	; 0x06
     ad2:	0f 83       	std	Y+7, r16	; 0x07
     ad4:	18 87       	std	Y+8, r17	; 0x08
     ad6:	ce 1a       	sub	r12, r30
     ad8:	df 0a       	sbc	r13, r31
     ada:	dc 82       	std	Y+4, r13	; 0x04
     adc:	cb 82       	std	Y+3, r12	; 0x03
     ade:	1a 82       	std	Y+2, r1	; 0x02
     ae0:	ce 01       	movw	r24, r28
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     ae8:	28 96       	adiw	r28, 0x08	; 8
     aea:	ea e0       	ldi	r30, 0x0A	; 10
     aec:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__epilogue_restores__+0x10>

00000af0 <__clzsi2>:
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	7b 01       	movw	r14, r22
     afa:	8c 01       	movw	r16, r24
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	e8 16       	cp	r14, r24
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	f8 06       	cpc	r15, r24
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	08 07       	cpc	r16, r24
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	18 07       	cpc	r17, r24
     b0c:	88 f4       	brcc	.+34     	; 0xb30 <__clzsi2+0x40>
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	e8 16       	cp	r14, r24
     b12:	f1 04       	cpc	r15, r1
     b14:	01 05       	cpc	r16, r1
     b16:	11 05       	cpc	r17, r1
     b18:	31 f0       	breq	.+12     	; 0xb26 <__clzsi2+0x36>
     b1a:	28 f0       	brcs	.+10     	; 0xb26 <__clzsi2+0x36>
     b1c:	88 e0       	ldi	r24, 0x08	; 8
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	a0 e0       	ldi	r26, 0x00	; 0
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	17 c0       	rjmp	.+46     	; 0xb54 <__clzsi2+0x64>
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	12 c0       	rjmp	.+36     	; 0xb54 <__clzsi2+0x64>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	e8 16       	cp	r14, r24
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	f8 06       	cpc	r15, r24
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	08 07       	cpc	r16, r24
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	18 07       	cpc	r17, r24
     b40:	28 f0       	brcs	.+10     	; 0xb4c <__clzsi2+0x5c>
     b42:	88 e1       	ldi	r24, 0x18	; 24
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <__clzsi2+0x64>
     b4c:	80 e1       	ldi	r24, 0x10	; 16
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	20 e2       	ldi	r18, 0x20	; 32
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	28 1b       	sub	r18, r24
     b5e:	39 0b       	sbc	r19, r25
     b60:	4a 0b       	sbc	r20, r26
     b62:	5b 0b       	sbc	r21, r27
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__clzsi2+0x7e>
     b66:	16 95       	lsr	r17
     b68:	07 95       	ror	r16
     b6a:	f7 94       	ror	r15
     b6c:	e7 94       	ror	r14
     b6e:	8a 95       	dec	r24
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__clzsi2+0x76>
     b72:	f7 01       	movw	r30, r14
     b74:	eb 57       	subi	r30, 0x7B	; 123
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	80 81       	ld	r24, Z
     b7a:	28 1b       	sub	r18, r24
     b7c:	31 09       	sbc	r19, r1
     b7e:	41 09       	sbc	r20, r1
     b80:	51 09       	sbc	r21, r1
     b82:	c9 01       	movw	r24, r18
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	08 95       	ret

00000b8e <__pack_f>:
     b8e:	df 92       	push	r13
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	fc 01       	movw	r30, r24
     b9a:	e4 80       	ldd	r14, Z+4	; 0x04
     b9c:	f5 80       	ldd	r15, Z+5	; 0x05
     b9e:	06 81       	ldd	r16, Z+6	; 0x06
     ba0:	17 81       	ldd	r17, Z+7	; 0x07
     ba2:	d1 80       	ldd	r13, Z+1	; 0x01
     ba4:	80 81       	ld	r24, Z
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	48 f4       	brcc	.+18     	; 0xbbc <__pack_f+0x2e>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	a0 e1       	ldi	r26, 0x10	; 16
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e8 2a       	or	r14, r24
     bb4:	f9 2a       	or	r15, r25
     bb6:	0a 2b       	or	r16, r26
     bb8:	1b 2b       	or	r17, r27
     bba:	a5 c0       	rjmp	.+330    	; 0xd06 <__pack_f+0x178>
     bbc:	84 30       	cpi	r24, 0x04	; 4
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <__pack_f+0x34>
     bc0:	9f c0       	rjmp	.+318    	; 0xd00 <__pack_f+0x172>
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	21 f4       	brne	.+8      	; 0xbce <__pack_f+0x40>
     bc6:	ee 24       	eor	r14, r14
     bc8:	ff 24       	eor	r15, r15
     bca:	87 01       	movw	r16, r14
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <__pack_f+0x4a>
     bce:	e1 14       	cp	r14, r1
     bd0:	f1 04       	cpc	r15, r1
     bd2:	01 05       	cpc	r16, r1
     bd4:	11 05       	cpc	r17, r1
     bd6:	19 f4       	brne	.+6      	; 0xbde <__pack_f+0x50>
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	96 c0       	rjmp	.+300    	; 0xd0a <__pack_f+0x17c>
     bde:	62 81       	ldd	r22, Z+2	; 0x02
     be0:	73 81       	ldd	r23, Z+3	; 0x03
     be2:	9f ef       	ldi	r25, 0xFF	; 255
     be4:	62 38       	cpi	r22, 0x82	; 130
     be6:	79 07       	cpc	r23, r25
     be8:	0c f0       	brlt	.+2      	; 0xbec <__pack_f+0x5e>
     bea:	5b c0       	rjmp	.+182    	; 0xca2 <__pack_f+0x114>
     bec:	22 e8       	ldi	r18, 0x82	; 130
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	26 1b       	sub	r18, r22
     bf2:	37 0b       	sbc	r19, r23
     bf4:	2a 31       	cpi	r18, 0x1A	; 26
     bf6:	31 05       	cpc	r19, r1
     bf8:	2c f0       	brlt	.+10     	; 0xc04 <__pack_f+0x76>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	2a c0       	rjmp	.+84     	; 0xc58 <__pack_f+0xca>
     c04:	b8 01       	movw	r22, r16
     c06:	a7 01       	movw	r20, r14
     c08:	02 2e       	mov	r0, r18
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__pack_f+0x86>
     c0c:	76 95       	lsr	r23
     c0e:	67 95       	ror	r22
     c10:	57 95       	ror	r21
     c12:	47 95       	ror	r20
     c14:	0a 94       	dec	r0
     c16:	d2 f7       	brpl	.-12     	; 0xc0c <__pack_f+0x7e>
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a0 e0       	ldi	r26, 0x00	; 0
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__pack_f+0x9c>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	aa 1f       	adc	r26, r26
     c28:	bb 1f       	adc	r27, r27
     c2a:	2a 95       	dec	r18
     c2c:	d2 f7       	brpl	.-12     	; 0xc22 <__pack_f+0x94>
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	a1 09       	sbc	r26, r1
     c32:	b1 09       	sbc	r27, r1
     c34:	8e 21       	and	r24, r14
     c36:	9f 21       	and	r25, r15
     c38:	a0 23       	and	r26, r16
     c3a:	b1 23       	and	r27, r17
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	a1 05       	cpc	r26, r1
     c40:	b1 05       	cpc	r27, r1
     c42:	21 f0       	breq	.+8      	; 0xc4c <__pack_f+0xbe>
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	a0 e0       	ldi	r26, 0x00	; 0
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	9a 01       	movw	r18, r20
     c4e:	ab 01       	movw	r20, r22
     c50:	28 2b       	or	r18, r24
     c52:	39 2b       	or	r19, r25
     c54:	4a 2b       	or	r20, r26
     c56:	5b 2b       	or	r21, r27
     c58:	da 01       	movw	r26, r20
     c5a:	c9 01       	movw	r24, r18
     c5c:	8f 77       	andi	r24, 0x7F	; 127
     c5e:	90 70       	andi	r25, 0x00	; 0
     c60:	a0 70       	andi	r26, 0x00	; 0
     c62:	b0 70       	andi	r27, 0x00	; 0
     c64:	80 34       	cpi	r24, 0x40	; 64
     c66:	91 05       	cpc	r25, r1
     c68:	a1 05       	cpc	r26, r1
     c6a:	b1 05       	cpc	r27, r1
     c6c:	39 f4       	brne	.+14     	; 0xc7c <__pack_f+0xee>
     c6e:	27 ff       	sbrs	r18, 7
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <__pack_f+0xf6>
     c72:	20 5c       	subi	r18, 0xC0	; 192
     c74:	3f 4f       	sbci	r19, 0xFF	; 255
     c76:	4f 4f       	sbci	r20, 0xFF	; 255
     c78:	5f 4f       	sbci	r21, 0xFF	; 255
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0xf6>
     c7c:	21 5c       	subi	r18, 0xC1	; 193
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
     c80:	4f 4f       	sbci	r20, 0xFF	; 255
     c82:	5f 4f       	sbci	r21, 0xFF	; 255
     c84:	e0 e0       	ldi	r30, 0x00	; 0
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	20 30       	cpi	r18, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	3a 07       	cpc	r19, r26
     c8e:	a0 e0       	ldi	r26, 0x00	; 0
     c90:	4a 07       	cpc	r20, r26
     c92:	a0 e4       	ldi	r26, 0x40	; 64
     c94:	5a 07       	cpc	r21, r26
     c96:	10 f0       	brcs	.+4      	; 0xc9c <__pack_f+0x10e>
     c98:	e1 e0       	ldi	r30, 0x01	; 1
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	79 01       	movw	r14, r18
     c9e:	8a 01       	movw	r16, r20
     ca0:	27 c0       	rjmp	.+78     	; 0xcf0 <__pack_f+0x162>
     ca2:	60 38       	cpi	r22, 0x80	; 128
     ca4:	71 05       	cpc	r23, r1
     ca6:	64 f5       	brge	.+88     	; 0xd00 <__pack_f+0x172>
     ca8:	fb 01       	movw	r30, r22
     caa:	e1 58       	subi	r30, 0x81	; 129
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	d8 01       	movw	r26, r16
     cb0:	c7 01       	movw	r24, r14
     cb2:	8f 77       	andi	r24, 0x7F	; 127
     cb4:	90 70       	andi	r25, 0x00	; 0
     cb6:	a0 70       	andi	r26, 0x00	; 0
     cb8:	b0 70       	andi	r27, 0x00	; 0
     cba:	80 34       	cpi	r24, 0x40	; 64
     cbc:	91 05       	cpc	r25, r1
     cbe:	a1 05       	cpc	r26, r1
     cc0:	b1 05       	cpc	r27, r1
     cc2:	39 f4       	brne	.+14     	; 0xcd2 <__pack_f+0x144>
     cc4:	e7 fe       	sbrs	r14, 7
     cc6:	0d c0       	rjmp	.+26     	; 0xce2 <__pack_f+0x154>
     cc8:	80 e4       	ldi	r24, 0x40	; 64
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	a0 e0       	ldi	r26, 0x00	; 0
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	04 c0       	rjmp	.+8      	; 0xcda <__pack_f+0x14c>
     cd2:	8f e3       	ldi	r24, 0x3F	; 63
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	a0 e0       	ldi	r26, 0x00	; 0
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e8 0e       	add	r14, r24
     cdc:	f9 1e       	adc	r15, r25
     cde:	0a 1f       	adc	r16, r26
     ce0:	1b 1f       	adc	r17, r27
     ce2:	17 ff       	sbrs	r17, 7
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <__pack_f+0x162>
     ce6:	16 95       	lsr	r17
     ce8:	07 95       	ror	r16
     cea:	f7 94       	ror	r15
     cec:	e7 94       	ror	r14
     cee:	31 96       	adiw	r30, 0x01	; 1
     cf0:	87 e0       	ldi	r24, 0x07	; 7
     cf2:	16 95       	lsr	r17
     cf4:	07 95       	ror	r16
     cf6:	f7 94       	ror	r15
     cf8:	e7 94       	ror	r14
     cfa:	8a 95       	dec	r24
     cfc:	d1 f7       	brne	.-12     	; 0xcf2 <__pack_f+0x164>
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <__pack_f+0x17c>
     d00:	ee 24       	eor	r14, r14
     d02:	ff 24       	eor	r15, r15
     d04:	87 01       	movw	r16, r14
     d06:	ef ef       	ldi	r30, 0xFF	; 255
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	6e 2f       	mov	r22, r30
     d0c:	67 95       	ror	r22
     d0e:	66 27       	eor	r22, r22
     d10:	67 95       	ror	r22
     d12:	90 2f       	mov	r25, r16
     d14:	9f 77       	andi	r25, 0x7F	; 127
     d16:	d7 94       	ror	r13
     d18:	dd 24       	eor	r13, r13
     d1a:	d7 94       	ror	r13
     d1c:	8e 2f       	mov	r24, r30
     d1e:	86 95       	lsr	r24
     d20:	49 2f       	mov	r20, r25
     d22:	46 2b       	or	r20, r22
     d24:	58 2f       	mov	r21, r24
     d26:	5d 29       	or	r21, r13
     d28:	b7 01       	movw	r22, r14
     d2a:	ca 01       	movw	r24, r20
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	08 95       	ret

00000d38 <__unpack_f>:
     d38:	fc 01       	movw	r30, r24
     d3a:	db 01       	movw	r26, r22
     d3c:	40 81       	ld	r20, Z
     d3e:	51 81       	ldd	r21, Z+1	; 0x01
     d40:	22 81       	ldd	r18, Z+2	; 0x02
     d42:	62 2f       	mov	r22, r18
     d44:	6f 77       	andi	r22, 0x7F	; 127
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	22 1f       	adc	r18, r18
     d4a:	22 27       	eor	r18, r18
     d4c:	22 1f       	adc	r18, r18
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	89 2f       	mov	r24, r25
     d52:	88 0f       	add	r24, r24
     d54:	82 2b       	or	r24, r18
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	99 1f       	adc	r25, r25
     d5c:	99 27       	eor	r25, r25
     d5e:	99 1f       	adc	r25, r25
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	9c 93       	st	X, r25
     d64:	11 97       	sbiw	r26, 0x01	; 1
     d66:	21 15       	cp	r18, r1
     d68:	31 05       	cpc	r19, r1
     d6a:	a9 f5       	brne	.+106    	; 0xdd6 <__unpack_f+0x9e>
     d6c:	41 15       	cp	r20, r1
     d6e:	51 05       	cpc	r21, r1
     d70:	61 05       	cpc	r22, r1
     d72:	71 05       	cpc	r23, r1
     d74:	11 f4       	brne	.+4      	; 0xd7a <__unpack_f+0x42>
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	37 c0       	rjmp	.+110    	; 0xde8 <__unpack_f+0xb0>
     d7a:	82 e8       	ldi	r24, 0x82	; 130
     d7c:	9f ef       	ldi	r25, 0xFF	; 255
     d7e:	13 96       	adiw	r26, 0x03	; 3
     d80:	9c 93       	st	X, r25
     d82:	8e 93       	st	-X, r24
     d84:	12 97       	sbiw	r26, 0x02	; 2
     d86:	9a 01       	movw	r18, r20
     d88:	ab 01       	movw	r20, r22
     d8a:	67 e0       	ldi	r22, 0x07	; 7
     d8c:	22 0f       	add	r18, r18
     d8e:	33 1f       	adc	r19, r19
     d90:	44 1f       	adc	r20, r20
     d92:	55 1f       	adc	r21, r21
     d94:	6a 95       	dec	r22
     d96:	d1 f7       	brne	.-12     	; 0xd8c <__unpack_f+0x54>
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	8c 93       	st	X, r24
     d9c:	0d c0       	rjmp	.+26     	; 0xdb8 <__unpack_f+0x80>
     d9e:	22 0f       	add	r18, r18
     da0:	33 1f       	adc	r19, r19
     da2:	44 1f       	adc	r20, r20
     da4:	55 1f       	adc	r21, r21
     da6:	12 96       	adiw	r26, 0x02	; 2
     da8:	8d 91       	ld	r24, X+
     daa:	9c 91       	ld	r25, X
     dac:	13 97       	sbiw	r26, 0x03	; 3
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	13 96       	adiw	r26, 0x03	; 3
     db2:	9c 93       	st	X, r25
     db4:	8e 93       	st	-X, r24
     db6:	12 97       	sbiw	r26, 0x02	; 2
     db8:	20 30       	cpi	r18, 0x00	; 0
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	38 07       	cpc	r19, r24
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	48 07       	cpc	r20, r24
     dc2:	80 e4       	ldi	r24, 0x40	; 64
     dc4:	58 07       	cpc	r21, r24
     dc6:	58 f3       	brcs	.-42     	; 0xd9e <__unpack_f+0x66>
     dc8:	14 96       	adiw	r26, 0x04	; 4
     dca:	2d 93       	st	X+, r18
     dcc:	3d 93       	st	X+, r19
     dce:	4d 93       	st	X+, r20
     dd0:	5c 93       	st	X, r21
     dd2:	17 97       	sbiw	r26, 0x07	; 7
     dd4:	08 95       	ret
     dd6:	2f 3f       	cpi	r18, 0xFF	; 255
     dd8:	31 05       	cpc	r19, r1
     dda:	79 f4       	brne	.+30     	; 0xdfa <__unpack_f+0xc2>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	19 f4       	brne	.+6      	; 0xdec <__unpack_f+0xb4>
     de6:	84 e0       	ldi	r24, 0x04	; 4
     de8:	8c 93       	st	X, r24
     dea:	08 95       	ret
     dec:	64 ff       	sbrs	r22, 4
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <__unpack_f+0xbe>
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	8c 93       	st	X, r24
     df4:	12 c0       	rjmp	.+36     	; 0xe1a <__unpack_f+0xe2>
     df6:	1c 92       	st	X, r1
     df8:	10 c0       	rjmp	.+32     	; 0xe1a <__unpack_f+0xe2>
     dfa:	2f 57       	subi	r18, 0x7F	; 127
     dfc:	30 40       	sbci	r19, 0x00	; 0
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	3c 93       	st	X, r19
     e02:	2e 93       	st	-X, r18
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	8c 93       	st	X, r24
     e0a:	87 e0       	ldi	r24, 0x07	; 7
     e0c:	44 0f       	add	r20, r20
     e0e:	55 1f       	adc	r21, r21
     e10:	66 1f       	adc	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	8a 95       	dec	r24
     e16:	d1 f7       	brne	.-12     	; 0xe0c <__unpack_f+0xd4>
     e18:	70 64       	ori	r23, 0x40	; 64
     e1a:	14 96       	adiw	r26, 0x04	; 4
     e1c:	4d 93       	st	X+, r20
     e1e:	5d 93       	st	X+, r21
     e20:	6d 93       	st	X+, r22
     e22:	7c 93       	st	X, r23
     e24:	17 97       	sbiw	r26, 0x07	; 7
     e26:	08 95       	ret

00000e28 <__fpcmp_parts_f>:
     e28:	1f 93       	push	r17
     e2a:	dc 01       	movw	r26, r24
     e2c:	fb 01       	movw	r30, r22
     e2e:	9c 91       	ld	r25, X
     e30:	92 30       	cpi	r25, 0x02	; 2
     e32:	08 f4       	brcc	.+2      	; 0xe36 <__fpcmp_parts_f+0xe>
     e34:	47 c0       	rjmp	.+142    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e36:	80 81       	ld	r24, Z
     e38:	82 30       	cpi	r24, 0x02	; 2
     e3a:	08 f4       	brcc	.+2      	; 0xe3e <__fpcmp_parts_f+0x16>
     e3c:	43 c0       	rjmp	.+134    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e3e:	94 30       	cpi	r25, 0x04	; 4
     e40:	51 f4       	brne	.+20     	; 0xe56 <__fpcmp_parts_f+0x2e>
     e42:	11 96       	adiw	r26, 0x01	; 1
     e44:	1c 91       	ld	r17, X
     e46:	84 30       	cpi	r24, 0x04	; 4
     e48:	99 f5       	brne	.+102    	; 0xeb0 <__fpcmp_parts_f+0x88>
     e4a:	81 81       	ldd	r24, Z+1	; 0x01
     e4c:	68 2f       	mov	r22, r24
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	61 1b       	sub	r22, r17
     e52:	71 09       	sbc	r23, r1
     e54:	3f c0       	rjmp	.+126    	; 0xed4 <__fpcmp_parts_f+0xac>
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	21 f0       	breq	.+8      	; 0xe62 <__fpcmp_parts_f+0x3a>
     e5a:	92 30       	cpi	r25, 0x02	; 2
     e5c:	31 f4       	brne	.+12     	; 0xe6a <__fpcmp_parts_f+0x42>
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	b9 f1       	breq	.+110    	; 0xed0 <__fpcmp_parts_f+0xa8>
     e62:	81 81       	ldd	r24, Z+1	; 0x01
     e64:	88 23       	and	r24, r24
     e66:	89 f1       	breq	.+98     	; 0xeca <__fpcmp_parts_f+0xa2>
     e68:	2d c0       	rjmp	.+90     	; 0xec4 <__fpcmp_parts_f+0x9c>
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	1c 91       	ld	r17, X
     e6e:	11 97       	sbiw	r26, 0x01	; 1
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	f1 f0       	breq	.+60     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e74:	81 81       	ldd	r24, Z+1	; 0x01
     e76:	18 17       	cp	r17, r24
     e78:	d9 f4       	brne	.+54     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e7a:	12 96       	adiw	r26, 0x02	; 2
     e7c:	2d 91       	ld	r18, X+
     e7e:	3c 91       	ld	r19, X
     e80:	13 97       	sbiw	r26, 0x03	; 3
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	93 81       	ldd	r25, Z+3	; 0x03
     e86:	82 17       	cp	r24, r18
     e88:	93 07       	cpc	r25, r19
     e8a:	94 f0       	brlt	.+36     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e8c:	28 17       	cp	r18, r24
     e8e:	39 07       	cpc	r19, r25
     e90:	bc f0       	brlt	.+46     	; 0xec0 <__fpcmp_parts_f+0x98>
     e92:	14 96       	adiw	r26, 0x04	; 4
     e94:	8d 91       	ld	r24, X+
     e96:	9d 91       	ld	r25, X+
     e98:	0d 90       	ld	r0, X+
     e9a:	bc 91       	ld	r27, X
     e9c:	a0 2d       	mov	r26, r0
     e9e:	24 81       	ldd	r18, Z+4	; 0x04
     ea0:	35 81       	ldd	r19, Z+5	; 0x05
     ea2:	46 81       	ldd	r20, Z+6	; 0x06
     ea4:	57 81       	ldd	r21, Z+7	; 0x07
     ea6:	28 17       	cp	r18, r24
     ea8:	39 07       	cpc	r19, r25
     eaa:	4a 07       	cpc	r20, r26
     eac:	5b 07       	cpc	r21, r27
     eae:	18 f4       	brcc	.+6      	; 0xeb6 <__fpcmp_parts_f+0x8e>
     eb0:	11 23       	and	r17, r17
     eb2:	41 f0       	breq	.+16     	; 0xec4 <__fpcmp_parts_f+0x9c>
     eb4:	0a c0       	rjmp	.+20     	; 0xeca <__fpcmp_parts_f+0xa2>
     eb6:	82 17       	cp	r24, r18
     eb8:	93 07       	cpc	r25, r19
     eba:	a4 07       	cpc	r26, r20
     ebc:	b5 07       	cpc	r27, r21
     ebe:	40 f4       	brcc	.+16     	; 0xed0 <__fpcmp_parts_f+0xa8>
     ec0:	11 23       	and	r17, r17
     ec2:	19 f0       	breq	.+6      	; 0xeca <__fpcmp_parts_f+0xa2>
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <__fpcmp_parts_f+0xac>
     eca:	6f ef       	ldi	r22, 0xFF	; 255
     ecc:	7f ef       	ldi	r23, 0xFF	; 255
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <__fpcmp_parts_f+0xac>
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	cb 01       	movw	r24, r22
     ed6:	1f 91       	pop	r17
     ed8:	08 95       	ret

00000eda <PWM_Timer0_Start>:
 * Timer0 will be used with pre-scaler F_CPU/8
 * F_PWM=(F_CPU)/(256*N) = (10^6)/(256*8) = 500Hz
 * Duty Cycle can be changed by updating the value
 * in The Compare Register
 */
void PWM_Timer0_Start(uint8 duty_cycle) {
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	0f 92       	push	r0
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
     eea:	e2 e5       	ldi	r30, 0x52	; 82
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	10 82       	st	Z, r1

	OCR0 = (duty_cycle / 100.0) * 255; // Set Compare Value
     ef0:	0c e5       	ldi	r16, 0x5C	; 92
     ef2:	10 e0       	ldi	r17, 0x00	; 0
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	88 2f       	mov	r24, r24
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	aa 27       	eor	r26, r26
     efc:	97 fd       	sbrc	r25, 7
     efe:	a0 95       	com	r26
     f00:	ba 2f       	mov	r27, r26
     f02:	bc 01       	movw	r22, r24
     f04:	cd 01       	movw	r24, r26
     f06:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	bc 01       	movw	r22, r24
     f10:	cd 01       	movw	r24, r26
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	48 ec       	ldi	r20, 0xC8	; 200
     f18:	52 e4       	ldi	r21, 0x42	; 66
     f1a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     f1e:	dc 01       	movw	r26, r24
     f20:	cb 01       	movw	r24, r22
     f22:	bc 01       	movw	r22, r24
     f24:	cd 01       	movw	r24, r26
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	4f e7       	ldi	r20, 0x7F	; 127
     f2c:	53 e4       	ldi	r21, 0x43	; 67
     f2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f32:	dc 01       	movw	r26, r24
     f34:	cb 01       	movw	r24, r22
     f36:	bc 01       	movw	r22, r24
     f38:	cd 01       	movw	r24, r26
     f3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	f8 01       	movw	r30, r16
     f44:	80 83       	st	Z, r24

	DDRB |= (1 << PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
     f46:	a7 e3       	ldi	r26, 0x37	; 55
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e7 e3       	ldi	r30, 0x37	; 55
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	88 60       	ori	r24, 0x08	; 8
     f52:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01);
     f54:	e3 e5       	ldi	r30, 0x53	; 83
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	8a e6       	ldi	r24, 0x6A	; 106
     f5a:	80 83       	st	Z, r24
}
     f5c:	0f 90       	pop	r0
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	08 95       	ret

00000f68 <DCMotor_init>:
/*
 * Description:
 * initializing motor pins to be output
 * stop the motor at the beginning
 */
void DCMotor_init(void) {
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_PIN_1_ID, PIN_OUTPUT);
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	41 e0       	ldi	r20, 0x01	; 1
     f76:	0e 94 da 11 	call	0x23b4	; 0x23b4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_PIN_2_ID, PIN_OUTPUT);
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	61 e0       	ldi	r22, 0x01	; 1
     f7e:	41 e0       	ldi	r20, 0x01	; 1
     f80:	0e 94 da 11 	call	0x23b4	; 0x23b4 <GPIO_setupPinDirection>

	GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_1_ID, LOGIC_LOW);
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	40 e0       	ldi	r20, 0x00	; 0
     f8a:	0e 94 c5 12 	call	0x258a	; 0x258a <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_2_ID, LOGIC_LOW);
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	61 e0       	ldi	r22, 0x01	; 1
     f92:	40 e0       	ldi	r20, 0x00	; 0
     f94:	0e 94 c5 12 	call	0x258a	; 0x258a <GPIO_writePin>
}
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <DCMotor_rotate>:
 * The function responsible for rotate the DC Motor CW/ or A-CW or
 * stop the motor based on the state input state value.
 * Send the required duty cycle to the PWM driver based on the
 * required speed value.
 */
void DCMotor_rotate(DCMotorState state, uint8 speed) {
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	00 d0       	rcall	.+0      	; 0xfa4 <DCMotor_rotate+0x6>
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <DCMotor_rotate+0x8>
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	6a 83       	std	Y+2, r22	; 0x02
	switch (state) {
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	3c 83       	std	Y+4, r19	; 0x04
     fb6:	2b 83       	std	Y+3, r18	; 0x03
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	9c 81       	ldd	r25, Y+4	; 0x04
     fbc:	81 30       	cpi	r24, 0x01	; 1
     fbe:	91 05       	cpc	r25, r1
     fc0:	a1 f0       	breq	.+40     	; 0xfea <DCMotor_rotate+0x4c>
     fc2:	2b 81       	ldd	r18, Y+3	; 0x03
     fc4:	3c 81       	ldd	r19, Y+4	; 0x04
     fc6:	22 30       	cpi	r18, 0x02	; 2
     fc8:	31 05       	cpc	r19, r1
     fca:	d1 f0       	breq	.+52     	; 0x1000 <DCMotor_rotate+0x62>
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	9c 81       	ldd	r25, Y+4	; 0x04
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	01 f5       	brne	.+64     	; 0x1014 <DCMotor_rotate+0x76>
	case STOP:
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_1_ID, LOGIC_LOW);
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	40 e0       	ldi	r20, 0x00	; 0
     fda:	0e 94 c5 12 	call	0x258a	; 0x258a <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_2_ID, LOGIC_LOW);
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	61 e0       	ldi	r22, 0x01	; 1
     fe2:	40 e0       	ldi	r20, 0x00	; 0
     fe4:	0e 94 c5 12 	call	0x258a	; 0x258a <GPIO_writePin>
     fe8:	15 c0       	rjmp	.+42     	; 0x1014 <DCMotor_rotate+0x76>
		break;
	case CLOCK_WISE:
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_1_ID, LOGIC_HIGH);
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	41 e0       	ldi	r20, 0x01	; 1
     ff0:	0e 94 c5 12 	call	0x258a	; 0x258a <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_2_ID, LOGIC_LOW);
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	61 e0       	ldi	r22, 0x01	; 1
     ff8:	40 e0       	ldi	r20, 0x00	; 0
     ffa:	0e 94 c5 12 	call	0x258a	; 0x258a <GPIO_writePin>
     ffe:	0a c0       	rjmp	.+20     	; 0x1014 <DCMotor_rotate+0x76>
		break;
	case ANTI_CLOCK_WISE:
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_1_ID, LOGIC_LOW);
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	40 e0       	ldi	r20, 0x00	; 0
    1006:	0e 94 c5 12 	call	0x258a	; 0x258a <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_2_ID, LOGIC_HIGH);
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	61 e0       	ldi	r22, 0x01	; 1
    100e:	41 e0       	ldi	r20, 0x01	; 1
    1010:	0e 94 c5 12 	call	0x258a	; 0x258a <GPIO_writePin>
	}
	PWM_Timer0_Start(speed);
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	0e 94 6d 07 	call	0xeda	; 0xeda <PWM_Timer0_Start>
}
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <LM35_getTemperature+0x6>
    102e:	0f 92       	push	r0
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    1034:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    1036:	1a 82       	std	Y+2, r1	; 0x02
    1038:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ADC_readChannel>
    1040:	9a 83       	std	Y+2, r25	; 0x02
    1042:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REFRENCE_VOLTAGE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	9a 81       	ldd	r25, Y+2	; 0x02
    1048:	cc 01       	movw	r24, r24
    104a:	a0 e0       	ldi	r26, 0x00	; 0
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	26 e9       	ldi	r18, 0x96	; 150
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	40 e0       	ldi	r20, 0x00	; 0
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	bc 01       	movw	r22, r24
    1058:	cd 01       	movw	r24, r26
    105a:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <__mulsi3>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	bc 01       	movw	r22, r24
    1064:	cd 01       	movw	r24, r26
    1066:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	bc 01       	movw	r22, r24
    1070:	cd 01       	movw	r24, r26
    1072:	2a e0       	ldi	r18, 0x0A	; 10
    1074:	37 ed       	ldi	r19, 0xD7	; 215
    1076:	43 e2       	ldi	r20, 0x23	; 35
    1078:	50 e4       	ldi	r21, 0x40	; 64
    107a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	bc 01       	movw	r22, r24
    1084:	cd 01       	movw	r24, r26
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 ed       	ldi	r19, 0xD0	; 208
    108a:	4f eb       	ldi	r20, 0xBF	; 191
    108c:	54 e4       	ldi	r21, 0x44	; 68
    108e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	bc 01       	movw	r22, r24
    1098:	cd 01       	movw	r24, r26
    109a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <LCD_Init>:
 * 4. function set for 8 or 4 bit mode
 * 5. Display control
 * 6. Clear display
 * 7. Entry mode set
 */
void LCD_Init() {
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	c6 54       	subi	r28, 0x46	; 70
    10c0:	d0 40       	sbci	r29, 0x00	; 0
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	cd bf       	out	0x3d, r28	; 61

	GPIO_setupPinDirection(LCD_CTRL_PORT, LCD_RS, PIN_OUTPUT);
    10cc:	83 e0       	ldi	r24, 0x03	; 3
    10ce:	60 e0       	ldi	r22, 0x00	; 0
    10d0:	41 e0       	ldi	r20, 0x01	; 1
    10d2:	0e 94 da 11 	call	0x23b4	; 0x23b4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_CTRL_PORT, LCD_E, PIN_OUTPUT);
    10d6:	83 e0       	ldi	r24, 0x03	; 3
    10d8:	62 e0       	ldi	r22, 0x02	; 2
    10da:	41 e0       	ldi	r20, 0x01	; 1
    10dc:	0e 94 da 11 	call	0x23b4	; 0x23b4 <GPIO_setupPinDirection>
    10e0:	fe 01       	movw	r30, r28
    10e2:	ed 5b       	subi	r30, 0xBD	; 189
    10e4:	ff 4f       	sbci	r31, 0xFF	; 255
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	a0 ea       	ldi	r26, 0xA0	; 160
    10ec:	b1 e4       	ldi	r27, 0x41	; 65
    10ee:	80 83       	st	Z, r24
    10f0:	91 83       	std	Z+1, r25	; 0x01
    10f2:	a2 83       	std	Z+2, r26	; 0x02
    10f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f6:	8e 01       	movw	r16, r28
    10f8:	01 5c       	subi	r16, 0xC1	; 193
    10fa:	1f 4f       	sbci	r17, 0xFF	; 255
    10fc:	fe 01       	movw	r30, r28
    10fe:	ed 5b       	subi	r30, 0xBD	; 189
    1100:	ff 4f       	sbci	r31, 0xFF	; 255
    1102:	60 81       	ld	r22, Z
    1104:	71 81       	ldd	r23, Z+1	; 0x01
    1106:	82 81       	ldd	r24, Z+2	; 0x02
    1108:	93 81       	ldd	r25, Z+3	; 0x03
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	4a e7       	ldi	r20, 0x7A	; 122
    1110:	53 e4       	ldi	r21, 0x43	; 67
    1112:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	f8 01       	movw	r30, r16
    111c:	80 83       	st	Z, r24
    111e:	91 83       	std	Z+1, r25	; 0x01
    1120:	a2 83       	std	Z+2, r26	; 0x02
    1122:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1124:	fe 01       	movw	r30, r28
    1126:	ff 96       	adiw	r30, 0x3f	; 63
    1128:	60 81       	ld	r22, Z
    112a:	71 81       	ldd	r23, Z+1	; 0x01
    112c:	82 81       	ldd	r24, Z+2	; 0x02
    112e:	93 81       	ldd	r25, Z+3	; 0x03
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e8       	ldi	r20, 0x80	; 128
    1136:	5f e3       	ldi	r21, 0x3F	; 63
    1138:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    113c:	88 23       	and	r24, r24
    113e:	2c f4       	brge	.+10     	; 0x114a <LCD_Init+0x98>
		__ticks = 1;
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	9e af       	std	Y+62, r25	; 0x3e
    1146:	8d af       	std	Y+61, r24	; 0x3d
    1148:	46 c0       	rjmp	.+140    	; 0x11d6 <LCD_Init+0x124>
	else if (__tmp > 65535)
    114a:	fe 01       	movw	r30, r28
    114c:	ff 96       	adiw	r30, 0x3f	; 63
    114e:	60 81       	ld	r22, Z
    1150:	71 81       	ldd	r23, Z+1	; 0x01
    1152:	82 81       	ldd	r24, Z+2	; 0x02
    1154:	93 81       	ldd	r25, Z+3	; 0x03
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	3f ef       	ldi	r19, 0xFF	; 255
    115a:	4f e7       	ldi	r20, 0x7F	; 127
    115c:	57 e4       	ldi	r21, 0x47	; 71
    115e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1162:	18 16       	cp	r1, r24
    1164:	64 f5       	brge	.+88     	; 0x11be <LCD_Init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1166:	fe 01       	movw	r30, r28
    1168:	ed 5b       	subi	r30, 0xBD	; 189
    116a:	ff 4f       	sbci	r31, 0xFF	; 255
    116c:	60 81       	ld	r22, Z
    116e:	71 81       	ldd	r23, Z+1	; 0x01
    1170:	82 81       	ldd	r24, Z+2	; 0x02
    1172:	93 81       	ldd	r25, Z+3	; 0x03
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	40 e2       	ldi	r20, 0x20	; 32
    117a:	51 e4       	ldi	r21, 0x41	; 65
    117c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1180:	dc 01       	movw	r26, r24
    1182:	cb 01       	movw	r24, r22
    1184:	bc 01       	movw	r22, r24
    1186:	cd 01       	movw	r24, r26
    1188:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    118c:	dc 01       	movw	r26, r24
    118e:	cb 01       	movw	r24, r22
    1190:	9e af       	std	Y+62, r25	; 0x3e
    1192:	8d af       	std	Y+61, r24	; 0x3d
    1194:	0f c0       	rjmp	.+30     	; 0x11b4 <LCD_Init+0x102>
    1196:	89 e1       	ldi	r24, 0x19	; 25
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	9c af       	std	Y+60, r25	; 0x3c
    119c:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    119e:	8b ad       	ldd	r24, Y+59	; 0x3b
    11a0:	9c ad       	ldd	r25, Y+60	; 0x3c
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	f1 f7       	brne	.-4      	; 0x11a2 <LCD_Init+0xf0>
    11a6:	9c af       	std	Y+60, r25	; 0x3c
    11a8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    11ac:	9e ad       	ldd	r25, Y+62	; 0x3e
    11ae:	01 97       	sbiw	r24, 0x01	; 1
    11b0:	9e af       	std	Y+62, r25	; 0x3e
    11b2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    11b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	69 f7       	brne	.-38     	; 0x1196 <LCD_Init+0xe4>
    11bc:	16 c0       	rjmp	.+44     	; 0x11ea <LCD_Init+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11be:	fe 01       	movw	r30, r28
    11c0:	ff 96       	adiw	r30, 0x3f	; 63
    11c2:	60 81       	ld	r22, Z
    11c4:	71 81       	ldd	r23, Z+1	; 0x01
    11c6:	82 81       	ldd	r24, Z+2	; 0x02
    11c8:	93 81       	ldd	r25, Z+3	; 0x03
    11ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	9e af       	std	Y+62, r25	; 0x3e
    11d4:	8d af       	std	Y+61, r24	; 0x3d
    11d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    11d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    11da:	9a af       	std	Y+58, r25	; 0x3a
    11dc:	89 af       	std	Y+57, r24	; 0x39
    11de:	89 ad       	ldd	r24, Y+57	; 0x39
    11e0:	9a ad       	ldd	r25, Y+58	; 0x3a
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	f1 f7       	brne	.-4      	; 0x11e2 <LCD_Init+0x130>
    11e6:	9a af       	std	Y+58, r25	; 0x3a
    11e8:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(20);
#if (LCD_Mode == 8)
	GPIO_setupPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
    11ea:	82 e0       	ldi	r24, 0x02	; 2
    11ec:	6f ef       	ldi	r22, 0xFF	; 255
    11ee:	0e 94 4b 14 	call	0x2896	; 0x2896 <GPIO_setupPortDirection>
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	a0 ef       	ldi	r26, 0xF0	; 240
    11f8:	b1 e4       	ldi	r27, 0x41	; 65
    11fa:	8d ab       	std	Y+53, r24	; 0x35
    11fc:	9e ab       	std	Y+54, r25	; 0x36
    11fe:	af ab       	std	Y+55, r26	; 0x37
    1200:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1202:	6d a9       	ldd	r22, Y+53	; 0x35
    1204:	7e a9       	ldd	r23, Y+54	; 0x36
    1206:	8f a9       	ldd	r24, Y+55	; 0x37
    1208:	98 ad       	ldd	r25, Y+56	; 0x38
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	4a e7       	ldi	r20, 0x7A	; 122
    1210:	53 e4       	ldi	r21, 0x43	; 67
    1212:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	89 ab       	std	Y+49, r24	; 0x31
    121c:	9a ab       	std	Y+50, r25	; 0x32
    121e:	ab ab       	std	Y+51, r26	; 0x33
    1220:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1222:	69 a9       	ldd	r22, Y+49	; 0x31
    1224:	7a a9       	ldd	r23, Y+50	; 0x32
    1226:	8b a9       	ldd	r24, Y+51	; 0x33
    1228:	9c a9       	ldd	r25, Y+52	; 0x34
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	40 e8       	ldi	r20, 0x80	; 128
    1230:	5f e3       	ldi	r21, 0x3F	; 63
    1232:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1236:	88 23       	and	r24, r24
    1238:	2c f4       	brge	.+10     	; 0x1244 <LCD_Init+0x192>
		__ticks = 1;
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	98 ab       	std	Y+48, r25	; 0x30
    1240:	8f a7       	std	Y+47, r24	; 0x2f
    1242:	3f c0       	rjmp	.+126    	; 0x12c2 <LCD_Init+0x210>
	else if (__tmp > 65535)
    1244:	69 a9       	ldd	r22, Y+49	; 0x31
    1246:	7a a9       	ldd	r23, Y+50	; 0x32
    1248:	8b a9       	ldd	r24, Y+51	; 0x33
    124a:	9c a9       	ldd	r25, Y+52	; 0x34
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	3f ef       	ldi	r19, 0xFF	; 255
    1250:	4f e7       	ldi	r20, 0x7F	; 127
    1252:	57 e4       	ldi	r21, 0x47	; 71
    1254:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1258:	18 16       	cp	r1, r24
    125a:	4c f5       	brge	.+82     	; 0x12ae <LCD_Init+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    125c:	6d a9       	ldd	r22, Y+53	; 0x35
    125e:	7e a9       	ldd	r23, Y+54	; 0x36
    1260:	8f a9       	ldd	r24, Y+55	; 0x37
    1262:	98 ad       	ldd	r25, Y+56	; 0x38
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	40 e2       	ldi	r20, 0x20	; 32
    126a:	51 e4       	ldi	r21, 0x41	; 65
    126c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	bc 01       	movw	r22, r24
    1276:	cd 01       	movw	r24, r26
    1278:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	98 ab       	std	Y+48, r25	; 0x30
    1282:	8f a7       	std	Y+47, r24	; 0x2f
    1284:	0f c0       	rjmp	.+30     	; 0x12a4 <LCD_Init+0x1f2>
    1286:	89 e1       	ldi	r24, 0x19	; 25
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	9e a7       	std	Y+46, r25	; 0x2e
    128c:	8d a7       	std	Y+45, r24	; 0x2d
    128e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1290:	9e a5       	ldd	r25, Y+46	; 0x2e
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	f1 f7       	brne	.-4      	; 0x1292 <LCD_Init+0x1e0>
    1296:	9e a7       	std	Y+46, r25	; 0x2e
    1298:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    129a:	8f a5       	ldd	r24, Y+47	; 0x2f
    129c:	98 a9       	ldd	r25, Y+48	; 0x30
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	98 ab       	std	Y+48, r25	; 0x30
    12a2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    12a6:	98 a9       	ldd	r25, Y+48	; 0x30
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	69 f7       	brne	.-38     	; 0x1286 <LCD_Init+0x1d4>
    12ac:	14 c0       	rjmp	.+40     	; 0x12d6 <LCD_Init+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ae:	69 a9       	ldd	r22, Y+49	; 0x31
    12b0:	7a a9       	ldd	r23, Y+50	; 0x32
    12b2:	8b a9       	ldd	r24, Y+51	; 0x33
    12b4:	9c a9       	ldd	r25, Y+52	; 0x34
    12b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	98 ab       	std	Y+48, r25	; 0x30
    12c0:	8f a7       	std	Y+47, r24	; 0x2f
    12c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    12c4:	98 a9       	ldd	r25, Y+48	; 0x30
    12c6:	9c a7       	std	Y+44, r25	; 0x2c
    12c8:	8b a7       	std	Y+43, r24	; 0x2b
    12ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    12cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	f1 f7       	brne	.-4      	; 0x12ce <LCD_Init+0x21c>
    12d2:	9c a7       	std	Y+44, r25	; 0x2c
    12d4:	8b a7       	std	Y+43, r24	; 0x2b
	GPIO_setupPinDirection(LCD_DATA_PORT, LCD_D7_PIN, PIN_OUTPUT);
#endif

	_delay_ms(30);
#if (LCD_Mode == 8)
	LCD_sendCommand(0x38);
    12d6:	88 e3       	ldi	r24, 0x38	; 56
    12d8:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <LCD_sendCommand>
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	a0 e8       	ldi	r26, 0x80	; 128
    12e2:	bf e3       	ldi	r27, 0x3F	; 63
    12e4:	8f a3       	std	Y+39, r24	; 0x27
    12e6:	98 a7       	std	Y+40, r25	; 0x28
    12e8:	a9 a7       	std	Y+41, r26	; 0x29
    12ea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ec:	6f a1       	ldd	r22, Y+39	; 0x27
    12ee:	78 a5       	ldd	r23, Y+40	; 0x28
    12f0:	89 a5       	ldd	r24, Y+41	; 0x29
    12f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	4a e7       	ldi	r20, 0x7A	; 122
    12fa:	53 e4       	ldi	r21, 0x43	; 67
    12fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	8b a3       	std	Y+35, r24	; 0x23
    1306:	9c a3       	std	Y+36, r25	; 0x24
    1308:	ad a3       	std	Y+37, r26	; 0x25
    130a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    130c:	6b a1       	ldd	r22, Y+35	; 0x23
    130e:	7c a1       	ldd	r23, Y+36	; 0x24
    1310:	8d a1       	ldd	r24, Y+37	; 0x25
    1312:	9e a1       	ldd	r25, Y+38	; 0x26
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	40 e8       	ldi	r20, 0x80	; 128
    131a:	5f e3       	ldi	r21, 0x3F	; 63
    131c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1320:	88 23       	and	r24, r24
    1322:	2c f4       	brge	.+10     	; 0x132e <LCD_Init+0x27c>
		__ticks = 1;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	9a a3       	std	Y+34, r25	; 0x22
    132a:	89 a3       	std	Y+33, r24	; 0x21
    132c:	3f c0       	rjmp	.+126    	; 0x13ac <LCD_Init+0x2fa>
	else if (__tmp > 65535)
    132e:	6b a1       	ldd	r22, Y+35	; 0x23
    1330:	7c a1       	ldd	r23, Y+36	; 0x24
    1332:	8d a1       	ldd	r24, Y+37	; 0x25
    1334:	9e a1       	ldd	r25, Y+38	; 0x26
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	3f ef       	ldi	r19, 0xFF	; 255
    133a:	4f e7       	ldi	r20, 0x7F	; 127
    133c:	57 e4       	ldi	r21, 0x47	; 71
    133e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1342:	18 16       	cp	r1, r24
    1344:	4c f5       	brge	.+82     	; 0x1398 <LCD_Init+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1346:	6f a1       	ldd	r22, Y+39	; 0x27
    1348:	78 a5       	ldd	r23, Y+40	; 0x28
    134a:	89 a5       	ldd	r24, Y+41	; 0x29
    134c:	9a a5       	ldd	r25, Y+42	; 0x2a
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	40 e2       	ldi	r20, 0x20	; 32
    1354:	51 e4       	ldi	r21, 0x41	; 65
    1356:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	bc 01       	movw	r22, r24
    1360:	cd 01       	movw	r24, r26
    1362:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	9a a3       	std	Y+34, r25	; 0x22
    136c:	89 a3       	std	Y+33, r24	; 0x21
    136e:	0f c0       	rjmp	.+30     	; 0x138e <LCD_Init+0x2dc>
    1370:	89 e1       	ldi	r24, 0x19	; 25
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	98 a3       	std	Y+32, r25	; 0x20
    1376:	8f 8f       	std	Y+31, r24	; 0x1f
    1378:	8f 8d       	ldd	r24, Y+31	; 0x1f
    137a:	98 a1       	ldd	r25, Y+32	; 0x20
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	f1 f7       	brne	.-4      	; 0x137c <LCD_Init+0x2ca>
    1380:	98 a3       	std	Y+32, r25	; 0x20
    1382:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1384:	89 a1       	ldd	r24, Y+33	; 0x21
    1386:	9a a1       	ldd	r25, Y+34	; 0x22
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	9a a3       	std	Y+34, r25	; 0x22
    138c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138e:	89 a1       	ldd	r24, Y+33	; 0x21
    1390:	9a a1       	ldd	r25, Y+34	; 0x22
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	69 f7       	brne	.-38     	; 0x1370 <LCD_Init+0x2be>
    1396:	14 c0       	rjmp	.+40     	; 0x13c0 <LCD_Init+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1398:	6b a1       	ldd	r22, Y+35	; 0x23
    139a:	7c a1       	ldd	r23, Y+36	; 0x24
    139c:	8d a1       	ldd	r24, Y+37	; 0x25
    139e:	9e a1       	ldd	r25, Y+38	; 0x26
    13a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	9a a3       	std	Y+34, r25	; 0x22
    13aa:	89 a3       	std	Y+33, r24	; 0x21
    13ac:	89 a1       	ldd	r24, Y+33	; 0x21
    13ae:	9a a1       	ldd	r25, Y+34	; 0x22
    13b0:	9e 8f       	std	Y+30, r25	; 0x1e
    13b2:	8d 8f       	std	Y+29, r24	; 0x1d
    13b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	f1 f7       	brne	.-4      	; 0x13b8 <LCD_Init+0x306>
    13bc:	9e 8f       	std	Y+30, r25	; 0x1e
    13be:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_sendCommand(0x0C);
    13c0:	8c e0       	ldi	r24, 0x0C	; 12
    13c2:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <LCD_sendCommand>
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	a0 e8       	ldi	r26, 0x80	; 128
    13cc:	bf e3       	ldi	r27, 0x3F	; 63
    13ce:	89 8f       	std	Y+25, r24	; 0x19
    13d0:	9a 8f       	std	Y+26, r25	; 0x1a
    13d2:	ab 8f       	std	Y+27, r26	; 0x1b
    13d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d6:	69 8d       	ldd	r22, Y+25	; 0x19
    13d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	4a e7       	ldi	r20, 0x7A	; 122
    13e4:	53 e4       	ldi	r21, 0x43	; 67
    13e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	8d 8b       	std	Y+21, r24	; 0x15
    13f0:	9e 8b       	std	Y+22, r25	; 0x16
    13f2:	af 8b       	std	Y+23, r26	; 0x17
    13f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13f6:	6d 89       	ldd	r22, Y+21	; 0x15
    13f8:	7e 89       	ldd	r23, Y+22	; 0x16
    13fa:	8f 89       	ldd	r24, Y+23	; 0x17
    13fc:	98 8d       	ldd	r25, Y+24	; 0x18
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	40 e8       	ldi	r20, 0x80	; 128
    1404:	5f e3       	ldi	r21, 0x3F	; 63
    1406:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    140a:	88 23       	and	r24, r24
    140c:	2c f4       	brge	.+10     	; 0x1418 <LCD_Init+0x366>
		__ticks = 1;
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	9c 8b       	std	Y+20, r25	; 0x14
    1414:	8b 8b       	std	Y+19, r24	; 0x13
    1416:	3f c0       	rjmp	.+126    	; 0x1496 <LCD_Init+0x3e4>
	else if (__tmp > 65535)
    1418:	6d 89       	ldd	r22, Y+21	; 0x15
    141a:	7e 89       	ldd	r23, Y+22	; 0x16
    141c:	8f 89       	ldd	r24, Y+23	; 0x17
    141e:	98 8d       	ldd	r25, Y+24	; 0x18
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	3f ef       	ldi	r19, 0xFF	; 255
    1424:	4f e7       	ldi	r20, 0x7F	; 127
    1426:	57 e4       	ldi	r21, 0x47	; 71
    1428:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    142c:	18 16       	cp	r1, r24
    142e:	4c f5       	brge	.+82     	; 0x1482 <LCD_Init+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1430:	69 8d       	ldd	r22, Y+25	; 0x19
    1432:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1434:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1436:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	40 e2       	ldi	r20, 0x20	; 32
    143e:	51 e4       	ldi	r21, 0x41	; 65
    1440:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	bc 01       	movw	r22, r24
    144a:	cd 01       	movw	r24, r26
    144c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	9c 8b       	std	Y+20, r25	; 0x14
    1456:	8b 8b       	std	Y+19, r24	; 0x13
    1458:	0f c0       	rjmp	.+30     	; 0x1478 <LCD_Init+0x3c6>
    145a:	89 e1       	ldi	r24, 0x19	; 25
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	9a 8b       	std	Y+18, r25	; 0x12
    1460:	89 8b       	std	Y+17, r24	; 0x11
    1462:	89 89       	ldd	r24, Y+17	; 0x11
    1464:	9a 89       	ldd	r25, Y+18	; 0x12
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <LCD_Init+0x3b4>
    146a:	9a 8b       	std	Y+18, r25	; 0x12
    146c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146e:	8b 89       	ldd	r24, Y+19	; 0x13
    1470:	9c 89       	ldd	r25, Y+20	; 0x14
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	9c 8b       	std	Y+20, r25	; 0x14
    1476:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1478:	8b 89       	ldd	r24, Y+19	; 0x13
    147a:	9c 89       	ldd	r25, Y+20	; 0x14
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	69 f7       	brne	.-38     	; 0x145a <LCD_Init+0x3a8>
    1480:	14 c0       	rjmp	.+40     	; 0x14aa <LCD_Init+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1482:	6d 89       	ldd	r22, Y+21	; 0x15
    1484:	7e 89       	ldd	r23, Y+22	; 0x16
    1486:	8f 89       	ldd	r24, Y+23	; 0x17
    1488:	98 8d       	ldd	r25, Y+24	; 0x18
    148a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	9c 8b       	std	Y+20, r25	; 0x14
    1494:	8b 8b       	std	Y+19, r24	; 0x13
    1496:	8b 89       	ldd	r24, Y+19	; 0x13
    1498:	9c 89       	ldd	r25, Y+20	; 0x14
    149a:	98 8b       	std	Y+16, r25	; 0x10
    149c:	8f 87       	std	Y+15, r24	; 0x0f
    149e:	8f 85       	ldd	r24, Y+15	; 0x0f
    14a0:	98 89       	ldd	r25, Y+16	; 0x10
    14a2:	01 97       	sbiw	r24, 0x01	; 1
    14a4:	f1 f7       	brne	.-4      	; 0x14a2 <LCD_Init+0x3f0>
    14a6:	98 8b       	std	Y+16, r25	; 0x10
    14a8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_sendCommand(0x01);
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <LCD_sendCommand>
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	a0 e0       	ldi	r26, 0x00	; 0
    14b6:	b0 e4       	ldi	r27, 0x40	; 64
    14b8:	8b 87       	std	Y+11, r24	; 0x0b
    14ba:	9c 87       	std	Y+12, r25	; 0x0c
    14bc:	ad 87       	std	Y+13, r26	; 0x0d
    14be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    14c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	4a e7       	ldi	r20, 0x7A	; 122
    14ce:	53 e4       	ldi	r21, 0x43	; 67
    14d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	8f 83       	std	Y+7, r24	; 0x07
    14da:	98 87       	std	Y+8, r25	; 0x08
    14dc:	a9 87       	std	Y+9, r26	; 0x09
    14de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14e0:	6f 81       	ldd	r22, Y+7	; 0x07
    14e2:	78 85       	ldd	r23, Y+8	; 0x08
    14e4:	89 85       	ldd	r24, Y+9	; 0x09
    14e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	40 e8       	ldi	r20, 0x80	; 128
    14ee:	5f e3       	ldi	r21, 0x3F	; 63
    14f0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14f4:	88 23       	and	r24, r24
    14f6:	2c f4       	brge	.+10     	; 0x1502 <LCD_Init+0x450>
		__ticks = 1;
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	9e 83       	std	Y+6, r25	; 0x06
    14fe:	8d 83       	std	Y+5, r24	; 0x05
    1500:	3f c0       	rjmp	.+126    	; 0x1580 <LCD_Init+0x4ce>
	else if (__tmp > 65535)
    1502:	6f 81       	ldd	r22, Y+7	; 0x07
    1504:	78 85       	ldd	r23, Y+8	; 0x08
    1506:	89 85       	ldd	r24, Y+9	; 0x09
    1508:	9a 85       	ldd	r25, Y+10	; 0x0a
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	3f ef       	ldi	r19, 0xFF	; 255
    150e:	4f e7       	ldi	r20, 0x7F	; 127
    1510:	57 e4       	ldi	r21, 0x47	; 71
    1512:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1516:	18 16       	cp	r1, r24
    1518:	4c f5       	brge	.+82     	; 0x156c <LCD_Init+0x4ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    151a:	6b 85       	ldd	r22, Y+11	; 0x0b
    151c:	7c 85       	ldd	r23, Y+12	; 0x0c
    151e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1520:	9e 85       	ldd	r25, Y+14	; 0x0e
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e2       	ldi	r20, 0x20	; 32
    1528:	51 e4       	ldi	r21, 0x41	; 65
    152a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	bc 01       	movw	r22, r24
    1534:	cd 01       	movw	r24, r26
    1536:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	9e 83       	std	Y+6, r25	; 0x06
    1540:	8d 83       	std	Y+5, r24	; 0x05
    1542:	0f c0       	rjmp	.+30     	; 0x1562 <LCD_Init+0x4b0>
    1544:	89 e1       	ldi	r24, 0x19	; 25
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	9c 83       	std	Y+4, r25	; 0x04
    154a:	8b 83       	std	Y+3, r24	; 0x03
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	9c 81       	ldd	r25, Y+4	; 0x04
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	f1 f7       	brne	.-4      	; 0x1550 <LCD_Init+0x49e>
    1554:	9c 83       	std	Y+4, r25	; 0x04
    1556:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1558:	8d 81       	ldd	r24, Y+5	; 0x05
    155a:	9e 81       	ldd	r25, Y+6	; 0x06
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	9e 83       	std	Y+6, r25	; 0x06
    1560:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1562:	8d 81       	ldd	r24, Y+5	; 0x05
    1564:	9e 81       	ldd	r25, Y+6	; 0x06
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	69 f7       	brne	.-38     	; 0x1544 <LCD_Init+0x492>
    156a:	14 c0       	rjmp	.+40     	; 0x1594 <LCD_Init+0x4e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156c:	6f 81       	ldd	r22, Y+7	; 0x07
    156e:	78 85       	ldd	r23, Y+8	; 0x08
    1570:	89 85       	ldd	r24, Y+9	; 0x09
    1572:	9a 85       	ldd	r25, Y+10	; 0x0a
    1574:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	9e 83       	std	Y+6, r25	; 0x06
    157e:	8d 83       	std	Y+5, r24	; 0x05
    1580:	8d 81       	ldd	r24, Y+5	; 0x05
    1582:	9e 81       	ldd	r25, Y+6	; 0x06
    1584:	9a 83       	std	Y+2, r25	; 0x02
    1586:	89 83       	std	Y+1, r24	; 0x01
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	9a 81       	ldd	r25, Y+2	; 0x02
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	f1 f7       	brne	.-4      	; 0x158c <LCD_Init+0x4da>
    1590:	9a 83       	std	Y+2, r25	; 0x02
    1592:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_sendCommand(0x06);
    1594:	86 e0       	ldi	r24, 0x06	; 6
    1596:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <LCD_sendCommand>
	_delay_ms(1);
	LCD_sendCommand(0x01);
	_delay_ms(2);
	LCD_sendCommand(0x06);
#endif
}
    159a:	ca 5b       	subi	r28, 0xBA	; 186
    159c:	df 4f       	sbci	r29, 0xFF	; 255
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	1f 91       	pop	r17
    15ae:	0f 91       	pop	r16
    15b0:	08 95       	ret

000015b2 <LCD_sendCommand>:
 * Clear RS pin
 * Set enable pin
 * send command
 * clear enable pin
 */
void LCD_sendCommand(uint8 Instruction) {
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	e9 97       	sbiw	r28, 0x39	; 57
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	89 af       	std	Y+57, r24	; 0x39

	GPIO_writePin(LCD_CTRL_PORT, LCD_RS, LOGIC_LOW);
    15c8:	83 e0       	ldi	r24, 0x03	; 3
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	40 e0       	ldi	r20, 0x00	; 0
    15ce:	0e 94 c5 12 	call	0x258a	; 0x258a <GPIO_writePin>
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	a0 e8       	ldi	r26, 0x80	; 128
    15d8:	bf e3       	ldi	r27, 0x3F	; 63
    15da:	8d ab       	std	Y+53, r24	; 0x35
    15dc:	9e ab       	std	Y+54, r25	; 0x36
    15de:	af ab       	std	Y+55, r26	; 0x37
    15e0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e2:	6d a9       	ldd	r22, Y+53	; 0x35
    15e4:	7e a9       	ldd	r23, Y+54	; 0x36
    15e6:	8f a9       	ldd	r24, Y+55	; 0x37
    15e8:	98 ad       	ldd	r25, Y+56	; 0x38
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	4a e7       	ldi	r20, 0x7A	; 122
    15f0:	53 e4       	ldi	r21, 0x43	; 67
    15f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	89 ab       	std	Y+49, r24	; 0x31
    15fc:	9a ab       	std	Y+50, r25	; 0x32
    15fe:	ab ab       	std	Y+51, r26	; 0x33
    1600:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1602:	69 a9       	ldd	r22, Y+49	; 0x31
    1604:	7a a9       	ldd	r23, Y+50	; 0x32
    1606:	8b a9       	ldd	r24, Y+51	; 0x33
    1608:	9c a9       	ldd	r25, Y+52	; 0x34
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	40 e8       	ldi	r20, 0x80	; 128
    1610:	5f e3       	ldi	r21, 0x3F	; 63
    1612:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1616:	88 23       	and	r24, r24
    1618:	2c f4       	brge	.+10     	; 0x1624 <LCD_sendCommand+0x72>
		__ticks = 1;
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	98 ab       	std	Y+48, r25	; 0x30
    1620:	8f a7       	std	Y+47, r24	; 0x2f
    1622:	3f c0       	rjmp	.+126    	; 0x16a2 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1624:	69 a9       	ldd	r22, Y+49	; 0x31
    1626:	7a a9       	ldd	r23, Y+50	; 0x32
    1628:	8b a9       	ldd	r24, Y+51	; 0x33
    162a:	9c a9       	ldd	r25, Y+52	; 0x34
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	3f ef       	ldi	r19, 0xFF	; 255
    1630:	4f e7       	ldi	r20, 0x7F	; 127
    1632:	57 e4       	ldi	r21, 0x47	; 71
    1634:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1638:	18 16       	cp	r1, r24
    163a:	4c f5       	brge	.+82     	; 0x168e <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    163c:	6d a9       	ldd	r22, Y+53	; 0x35
    163e:	7e a9       	ldd	r23, Y+54	; 0x36
    1640:	8f a9       	ldd	r24, Y+55	; 0x37
    1642:	98 ad       	ldd	r25, Y+56	; 0x38
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	40 e2       	ldi	r20, 0x20	; 32
    164a:	51 e4       	ldi	r21, 0x41	; 65
    164c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	bc 01       	movw	r22, r24
    1656:	cd 01       	movw	r24, r26
    1658:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	98 ab       	std	Y+48, r25	; 0x30
    1662:	8f a7       	std	Y+47, r24	; 0x2f
    1664:	0f c0       	rjmp	.+30     	; 0x1684 <LCD_sendCommand+0xd2>
    1666:	89 e1       	ldi	r24, 0x19	; 25
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	9e a7       	std	Y+46, r25	; 0x2e
    166c:	8d a7       	std	Y+45, r24	; 0x2d
    166e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1670:	9e a5       	ldd	r25, Y+46	; 0x2e
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	f1 f7       	brne	.-4      	; 0x1672 <LCD_sendCommand+0xc0>
    1676:	9e a7       	std	Y+46, r25	; 0x2e
    1678:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    167a:	8f a5       	ldd	r24, Y+47	; 0x2f
    167c:	98 a9       	ldd	r25, Y+48	; 0x30
    167e:	01 97       	sbiw	r24, 0x01	; 1
    1680:	98 ab       	std	Y+48, r25	; 0x30
    1682:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1684:	8f a5       	ldd	r24, Y+47	; 0x2f
    1686:	98 a9       	ldd	r25, Y+48	; 0x30
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	69 f7       	brne	.-38     	; 0x1666 <LCD_sendCommand+0xb4>
    168c:	14 c0       	rjmp	.+40     	; 0x16b6 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168e:	69 a9       	ldd	r22, Y+49	; 0x31
    1690:	7a a9       	ldd	r23, Y+50	; 0x32
    1692:	8b a9       	ldd	r24, Y+51	; 0x33
    1694:	9c a9       	ldd	r25, Y+52	; 0x34
    1696:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	98 ab       	std	Y+48, r25	; 0x30
    16a0:	8f a7       	std	Y+47, r24	; 0x2f
    16a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    16a4:	98 a9       	ldd	r25, Y+48	; 0x30
    16a6:	9c a7       	std	Y+44, r25	; 0x2c
    16a8:	8b a7       	std	Y+43, r24	; 0x2b
    16aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    16ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	f1 f7       	brne	.-4      	; 0x16ae <LCD_sendCommand+0xfc>
    16b2:	9c a7       	std	Y+44, r25	; 0x2c
    16b4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

#if(LCD_Mode == 8)
	GPIO_writePin(LCD_CTRL_PORT, LCD_E, LOGIC_HIGH);
    16b6:	83 e0       	ldi	r24, 0x03	; 3
    16b8:	62 e0       	ldi	r22, 0x02	; 2
    16ba:	41 e0       	ldi	r20, 0x01	; 1
    16bc:	0e 94 c5 12 	call	0x258a	; 0x258a <GPIO_writePin>
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	a0 e8       	ldi	r26, 0x80	; 128
    16c6:	bf e3       	ldi	r27, 0x3F	; 63
    16c8:	8f a3       	std	Y+39, r24	; 0x27
    16ca:	98 a7       	std	Y+40, r25	; 0x28
    16cc:	a9 a7       	std	Y+41, r26	; 0x29
    16ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d0:	6f a1       	ldd	r22, Y+39	; 0x27
    16d2:	78 a5       	ldd	r23, Y+40	; 0x28
    16d4:	89 a5       	ldd	r24, Y+41	; 0x29
    16d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	4a e7       	ldi	r20, 0x7A	; 122
    16de:	53 e4       	ldi	r21, 0x43	; 67
    16e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	8b a3       	std	Y+35, r24	; 0x23
    16ea:	9c a3       	std	Y+36, r25	; 0x24
    16ec:	ad a3       	std	Y+37, r26	; 0x25
    16ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16f0:	6b a1       	ldd	r22, Y+35	; 0x23
    16f2:	7c a1       	ldd	r23, Y+36	; 0x24
    16f4:	8d a1       	ldd	r24, Y+37	; 0x25
    16f6:	9e a1       	ldd	r25, Y+38	; 0x26
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e8       	ldi	r20, 0x80	; 128
    16fe:	5f e3       	ldi	r21, 0x3F	; 63
    1700:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1704:	88 23       	and	r24, r24
    1706:	2c f4       	brge	.+10     	; 0x1712 <LCD_sendCommand+0x160>
		__ticks = 1;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	9a a3       	std	Y+34, r25	; 0x22
    170e:	89 a3       	std	Y+33, r24	; 0x21
    1710:	3f c0       	rjmp	.+126    	; 0x1790 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1712:	6b a1       	ldd	r22, Y+35	; 0x23
    1714:	7c a1       	ldd	r23, Y+36	; 0x24
    1716:	8d a1       	ldd	r24, Y+37	; 0x25
    1718:	9e a1       	ldd	r25, Y+38	; 0x26
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	3f ef       	ldi	r19, 0xFF	; 255
    171e:	4f e7       	ldi	r20, 0x7F	; 127
    1720:	57 e4       	ldi	r21, 0x47	; 71
    1722:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1726:	18 16       	cp	r1, r24
    1728:	4c f5       	brge	.+82     	; 0x177c <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    172a:	6f a1       	ldd	r22, Y+39	; 0x27
    172c:	78 a5       	ldd	r23, Y+40	; 0x28
    172e:	89 a5       	ldd	r24, Y+41	; 0x29
    1730:	9a a5       	ldd	r25, Y+42	; 0x2a
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e2       	ldi	r20, 0x20	; 32
    1738:	51 e4       	ldi	r21, 0x41	; 65
    173a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	bc 01       	movw	r22, r24
    1744:	cd 01       	movw	r24, r26
    1746:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	9a a3       	std	Y+34, r25	; 0x22
    1750:	89 a3       	std	Y+33, r24	; 0x21
    1752:	0f c0       	rjmp	.+30     	; 0x1772 <LCD_sendCommand+0x1c0>
    1754:	89 e1       	ldi	r24, 0x19	; 25
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	98 a3       	std	Y+32, r25	; 0x20
    175a:	8f 8f       	std	Y+31, r24	; 0x1f
    175c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    175e:	98 a1       	ldd	r25, Y+32	; 0x20
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	f1 f7       	brne	.-4      	; 0x1760 <LCD_sendCommand+0x1ae>
    1764:	98 a3       	std	Y+32, r25	; 0x20
    1766:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1768:	89 a1       	ldd	r24, Y+33	; 0x21
    176a:	9a a1       	ldd	r25, Y+34	; 0x22
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	9a a3       	std	Y+34, r25	; 0x22
    1770:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1772:	89 a1       	ldd	r24, Y+33	; 0x21
    1774:	9a a1       	ldd	r25, Y+34	; 0x22
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	69 f7       	brne	.-38     	; 0x1754 <LCD_sendCommand+0x1a2>
    177a:	14 c0       	rjmp	.+40     	; 0x17a4 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    177c:	6b a1       	ldd	r22, Y+35	; 0x23
    177e:	7c a1       	ldd	r23, Y+36	; 0x24
    1780:	8d a1       	ldd	r24, Y+37	; 0x25
    1782:	9e a1       	ldd	r25, Y+38	; 0x26
    1784:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	9a a3       	std	Y+34, r25	; 0x22
    178e:	89 a3       	std	Y+33, r24	; 0x21
    1790:	89 a1       	ldd	r24, Y+33	; 0x21
    1792:	9a a1       	ldd	r25, Y+34	; 0x22
    1794:	9e 8f       	std	Y+30, r25	; 0x1e
    1796:	8d 8f       	std	Y+29, r24	; 0x1d
    1798:	8d 8d       	ldd	r24, Y+29	; 0x1d
    179a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <LCD_sendCommand+0x1ea>
    17a0:	9e 8f       	std	Y+30, r25	; 0x1e
    17a2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePort(LCD_DATA_PORT, Instruction);
    17a4:	82 e0       	ldi	r24, 0x02	; 2
    17a6:	69 ad       	ldd	r22, Y+57	; 0x39
    17a8:	0e 94 8f 14 	call	0x291e	; 0x291e <GPIO_writePort>
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	a0 e8       	ldi	r26, 0x80	; 128
    17b2:	bf e3       	ldi	r27, 0x3F	; 63
    17b4:	89 8f       	std	Y+25, r24	; 0x19
    17b6:	9a 8f       	std	Y+26, r25	; 0x1a
    17b8:	ab 8f       	std	Y+27, r26	; 0x1b
    17ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17bc:	69 8d       	ldd	r22, Y+25	; 0x19
    17be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	4a e7       	ldi	r20, 0x7A	; 122
    17ca:	53 e4       	ldi	r21, 0x43	; 67
    17cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	8d 8b       	std	Y+21, r24	; 0x15
    17d6:	9e 8b       	std	Y+22, r25	; 0x16
    17d8:	af 8b       	std	Y+23, r26	; 0x17
    17da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17dc:	6d 89       	ldd	r22, Y+21	; 0x15
    17de:	7e 89       	ldd	r23, Y+22	; 0x16
    17e0:	8f 89       	ldd	r24, Y+23	; 0x17
    17e2:	98 8d       	ldd	r25, Y+24	; 0x18
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	40 e8       	ldi	r20, 0x80	; 128
    17ea:	5f e3       	ldi	r21, 0x3F	; 63
    17ec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17f0:	88 23       	and	r24, r24
    17f2:	2c f4       	brge	.+10     	; 0x17fe <LCD_sendCommand+0x24c>
		__ticks = 1;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	9c 8b       	std	Y+20, r25	; 0x14
    17fa:	8b 8b       	std	Y+19, r24	; 0x13
    17fc:	3f c0       	rjmp	.+126    	; 0x187c <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    17fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1800:	7e 89       	ldd	r23, Y+22	; 0x16
    1802:	8f 89       	ldd	r24, Y+23	; 0x17
    1804:	98 8d       	ldd	r25, Y+24	; 0x18
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	3f ef       	ldi	r19, 0xFF	; 255
    180a:	4f e7       	ldi	r20, 0x7F	; 127
    180c:	57 e4       	ldi	r21, 0x47	; 71
    180e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1812:	18 16       	cp	r1, r24
    1814:	4c f5       	brge	.+82     	; 0x1868 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1816:	69 8d       	ldd	r22, Y+25	; 0x19
    1818:	7a 8d       	ldd	r23, Y+26	; 0x1a
    181a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    181c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	40 e2       	ldi	r20, 0x20	; 32
    1824:	51 e4       	ldi	r21, 0x41	; 65
    1826:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	bc 01       	movw	r22, r24
    1830:	cd 01       	movw	r24, r26
    1832:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	9c 8b       	std	Y+20, r25	; 0x14
    183c:	8b 8b       	std	Y+19, r24	; 0x13
    183e:	0f c0       	rjmp	.+30     	; 0x185e <LCD_sendCommand+0x2ac>
    1840:	89 e1       	ldi	r24, 0x19	; 25
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	9a 8b       	std	Y+18, r25	; 0x12
    1846:	89 8b       	std	Y+17, r24	; 0x11
    1848:	89 89       	ldd	r24, Y+17	; 0x11
    184a:	9a 89       	ldd	r25, Y+18	; 0x12
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	f1 f7       	brne	.-4      	; 0x184c <LCD_sendCommand+0x29a>
    1850:	9a 8b       	std	Y+18, r25	; 0x12
    1852:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1854:	8b 89       	ldd	r24, Y+19	; 0x13
    1856:	9c 89       	ldd	r25, Y+20	; 0x14
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	9c 8b       	std	Y+20, r25	; 0x14
    185c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185e:	8b 89       	ldd	r24, Y+19	; 0x13
    1860:	9c 89       	ldd	r25, Y+20	; 0x14
    1862:	00 97       	sbiw	r24, 0x00	; 0
    1864:	69 f7       	brne	.-38     	; 0x1840 <LCD_sendCommand+0x28e>
    1866:	14 c0       	rjmp	.+40     	; 0x1890 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1868:	6d 89       	ldd	r22, Y+21	; 0x15
    186a:	7e 89       	ldd	r23, Y+22	; 0x16
    186c:	8f 89       	ldd	r24, Y+23	; 0x17
    186e:	98 8d       	ldd	r25, Y+24	; 0x18
    1870:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	9c 8b       	std	Y+20, r25	; 0x14
    187a:	8b 8b       	std	Y+19, r24	; 0x13
    187c:	8b 89       	ldd	r24, Y+19	; 0x13
    187e:	9c 89       	ldd	r25, Y+20	; 0x14
    1880:	98 8b       	std	Y+16, r25	; 0x10
    1882:	8f 87       	std	Y+15, r24	; 0x0f
    1884:	8f 85       	ldd	r24, Y+15	; 0x0f
    1886:	98 89       	ldd	r25, Y+16	; 0x10
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	f1 f7       	brne	.-4      	; 0x1888 <LCD_sendCommand+0x2d6>
    188c:	98 8b       	std	Y+16, r25	; 0x10
    188e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	GPIO_writePin(LCD_CTRL_PORT, LCD_E, LOGIC_LOW);
    1890:	83 e0       	ldi	r24, 0x03	; 3
    1892:	62 e0       	ldi	r22, 0x02	; 2
    1894:	40 e0       	ldi	r20, 0x00	; 0
    1896:	0e 94 c5 12 	call	0x258a	; 0x258a <GPIO_writePin>
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	a0 e8       	ldi	r26, 0x80	; 128
    18a0:	bf e3       	ldi	r27, 0x3F	; 63
    18a2:	8b 87       	std	Y+11, r24	; 0x0b
    18a4:	9c 87       	std	Y+12, r25	; 0x0c
    18a6:	ad 87       	std	Y+13, r26	; 0x0d
    18a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	4a e7       	ldi	r20, 0x7A	; 122
    18b8:	53 e4       	ldi	r21, 0x43	; 67
    18ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	8f 83       	std	Y+7, r24	; 0x07
    18c4:	98 87       	std	Y+8, r25	; 0x08
    18c6:	a9 87       	std	Y+9, r26	; 0x09
    18c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18ca:	6f 81       	ldd	r22, Y+7	; 0x07
    18cc:	78 85       	ldd	r23, Y+8	; 0x08
    18ce:	89 85       	ldd	r24, Y+9	; 0x09
    18d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e8       	ldi	r20, 0x80	; 128
    18d8:	5f e3       	ldi	r21, 0x3F	; 63
    18da:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18de:	88 23       	and	r24, r24
    18e0:	2c f4       	brge	.+10     	; 0x18ec <LCD_sendCommand+0x33a>
		__ticks = 1;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	9e 83       	std	Y+6, r25	; 0x06
    18e8:	8d 83       	std	Y+5, r24	; 0x05
    18ea:	3f c0       	rjmp	.+126    	; 0x196a <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    18ec:	6f 81       	ldd	r22, Y+7	; 0x07
    18ee:	78 85       	ldd	r23, Y+8	; 0x08
    18f0:	89 85       	ldd	r24, Y+9	; 0x09
    18f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	3f ef       	ldi	r19, 0xFF	; 255
    18f8:	4f e7       	ldi	r20, 0x7F	; 127
    18fa:	57 e4       	ldi	r21, 0x47	; 71
    18fc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1900:	18 16       	cp	r1, r24
    1902:	4c f5       	brge	.+82     	; 0x1956 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1904:	6b 85       	ldd	r22, Y+11	; 0x0b
    1906:	7c 85       	ldd	r23, Y+12	; 0x0c
    1908:	8d 85       	ldd	r24, Y+13	; 0x0d
    190a:	9e 85       	ldd	r25, Y+14	; 0x0e
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	40 e2       	ldi	r20, 0x20	; 32
    1912:	51 e4       	ldi	r21, 0x41	; 65
    1914:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	bc 01       	movw	r22, r24
    191e:	cd 01       	movw	r24, r26
    1920:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	9e 83       	std	Y+6, r25	; 0x06
    192a:	8d 83       	std	Y+5, r24	; 0x05
    192c:	0f c0       	rjmp	.+30     	; 0x194c <LCD_sendCommand+0x39a>
    192e:	89 e1       	ldi	r24, 0x19	; 25
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	9c 83       	std	Y+4, r25	; 0x04
    1934:	8b 83       	std	Y+3, r24	; 0x03
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	9c 81       	ldd	r25, Y+4	; 0x04
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	f1 f7       	brne	.-4      	; 0x193a <LCD_sendCommand+0x388>
    193e:	9c 83       	std	Y+4, r25	; 0x04
    1940:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1942:	8d 81       	ldd	r24, Y+5	; 0x05
    1944:	9e 81       	ldd	r25, Y+6	; 0x06
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	9e 83       	std	Y+6, r25	; 0x06
    194a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194c:	8d 81       	ldd	r24, Y+5	; 0x05
    194e:	9e 81       	ldd	r25, Y+6	; 0x06
    1950:	00 97       	sbiw	r24, 0x00	; 0
    1952:	69 f7       	brne	.-38     	; 0x192e <LCD_sendCommand+0x37c>
    1954:	14 c0       	rjmp	.+40     	; 0x197e <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1956:	6f 81       	ldd	r22, Y+7	; 0x07
    1958:	78 85       	ldd	r23, Y+8	; 0x08
    195a:	89 85       	ldd	r24, Y+9	; 0x09
    195c:	9a 85       	ldd	r25, Y+10	; 0x0a
    195e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	9e 83       	std	Y+6, r25	; 0x06
    1968:	8d 83       	std	Y+5, r24	; 0x05
    196a:	8d 81       	ldd	r24, Y+5	; 0x05
    196c:	9e 81       	ldd	r25, Y+6	; 0x06
    196e:	9a 83       	std	Y+2, r25	; 0x02
    1970:	89 83       	std	Y+1, r24	; 0x01
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	9a 81       	ldd	r25, Y+2	; 0x02
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	f1 f7       	brne	.-4      	; 0x1976 <LCD_sendCommand+0x3c4>
    197a:	9a 83       	std	Y+2, r25	; 0x02
    197c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(Instruction, 3));

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_CTRL_PORT, LCD_E, LOGIC_LOW); /* Disable LCD E=0 */
#endif
}
    197e:	e9 96       	adiw	r28, 0x39	; 57
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	f8 94       	cli
    1984:	de bf       	out	0x3e, r29	; 62
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	cd bf       	out	0x3d, r28	; 61
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <LCD_displayCharacter>:
 * 1. Set RS pin
 * 2. Set enable pin
 * 3. send data
 * 4. clear enable pin
 */
void LCD_displayCharacter(uint8 data) {
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	e9 97       	sbiw	r28, 0x39	; 57
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	de bf       	out	0x3e, r29	; 62
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	cd bf       	out	0x3d, r28	; 61
    19a4:	89 af       	std	Y+57, r24	; 0x39

	GPIO_writePin(LCD_CTRL_PORT, LCD_RS, LOGIC_HIGH);
    19a6:	83 e0       	ldi	r24, 0x03	; 3
    19a8:	60 e0       	ldi	r22, 0x00	; 0
    19aa:	41 e0       	ldi	r20, 0x01	; 1
    19ac:	0e 94 c5 12 	call	0x258a	; 0x258a <GPIO_writePin>
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	a0 e8       	ldi	r26, 0x80	; 128
    19b6:	bf e3       	ldi	r27, 0x3F	; 63
    19b8:	8d ab       	std	Y+53, r24	; 0x35
    19ba:	9e ab       	std	Y+54, r25	; 0x36
    19bc:	af ab       	std	Y+55, r26	; 0x37
    19be:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c0:	6d a9       	ldd	r22, Y+53	; 0x35
    19c2:	7e a9       	ldd	r23, Y+54	; 0x36
    19c4:	8f a9       	ldd	r24, Y+55	; 0x37
    19c6:	98 ad       	ldd	r25, Y+56	; 0x38
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	4a e7       	ldi	r20, 0x7A	; 122
    19ce:	53 e4       	ldi	r21, 0x43	; 67
    19d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	89 ab       	std	Y+49, r24	; 0x31
    19da:	9a ab       	std	Y+50, r25	; 0x32
    19dc:	ab ab       	std	Y+51, r26	; 0x33
    19de:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19e0:	69 a9       	ldd	r22, Y+49	; 0x31
    19e2:	7a a9       	ldd	r23, Y+50	; 0x32
    19e4:	8b a9       	ldd	r24, Y+51	; 0x33
    19e6:	9c a9       	ldd	r25, Y+52	; 0x34
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e8       	ldi	r20, 0x80	; 128
    19ee:	5f e3       	ldi	r21, 0x3F	; 63
    19f0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19f4:	88 23       	and	r24, r24
    19f6:	2c f4       	brge	.+10     	; 0x1a02 <LCD_displayCharacter+0x72>
		__ticks = 1;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	98 ab       	std	Y+48, r25	; 0x30
    19fe:	8f a7       	std	Y+47, r24	; 0x2f
    1a00:	3f c0       	rjmp	.+126    	; 0x1a80 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1a02:	69 a9       	ldd	r22, Y+49	; 0x31
    1a04:	7a a9       	ldd	r23, Y+50	; 0x32
    1a06:	8b a9       	ldd	r24, Y+51	; 0x33
    1a08:	9c a9       	ldd	r25, Y+52	; 0x34
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	3f ef       	ldi	r19, 0xFF	; 255
    1a0e:	4f e7       	ldi	r20, 0x7F	; 127
    1a10:	57 e4       	ldi	r21, 0x47	; 71
    1a12:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a16:	18 16       	cp	r1, r24
    1a18:	4c f5       	brge	.+82     	; 0x1a6c <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1a:	6d a9       	ldd	r22, Y+53	; 0x35
    1a1c:	7e a9       	ldd	r23, Y+54	; 0x36
    1a1e:	8f a9       	ldd	r24, Y+55	; 0x37
    1a20:	98 ad       	ldd	r25, Y+56	; 0x38
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e2       	ldi	r20, 0x20	; 32
    1a28:	51 e4       	ldi	r21, 0x41	; 65
    1a2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	bc 01       	movw	r22, r24
    1a34:	cd 01       	movw	r24, r26
    1a36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	98 ab       	std	Y+48, r25	; 0x30
    1a40:	8f a7       	std	Y+47, r24	; 0x2f
    1a42:	0f c0       	rjmp	.+30     	; 0x1a62 <LCD_displayCharacter+0xd2>
    1a44:	89 e1       	ldi	r24, 0x19	; 25
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	9e a7       	std	Y+46, r25	; 0x2e
    1a4a:	8d a7       	std	Y+45, r24	; 0x2d
    1a4c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a4e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <LCD_displayCharacter+0xc0>
    1a54:	9e a7       	std	Y+46, r25	; 0x2e
    1a56:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a58:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a5a:	98 a9       	ldd	r25, Y+48	; 0x30
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	98 ab       	std	Y+48, r25	; 0x30
    1a60:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a62:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a64:	98 a9       	ldd	r25, Y+48	; 0x30
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	69 f7       	brne	.-38     	; 0x1a44 <LCD_displayCharacter+0xb4>
    1a6a:	14 c0       	rjmp	.+40     	; 0x1a94 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a6e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a70:	8b a9       	ldd	r24, Y+51	; 0x33
    1a72:	9c a9       	ldd	r25, Y+52	; 0x34
    1a74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	98 ab       	std	Y+48, r25	; 0x30
    1a7e:	8f a7       	std	Y+47, r24	; 0x2f
    1a80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a82:	98 a9       	ldd	r25, Y+48	; 0x30
    1a84:	9c a7       	std	Y+44, r25	; 0x2c
    1a86:	8b a7       	std	Y+43, r24	; 0x2b
    1a88:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a8a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <LCD_displayCharacter+0xfc>
    1a90:	9c a7       	std	Y+44, r25	; 0x2c
    1a92:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

#if(LCD_Mode == 8)
	GPIO_writePin(LCD_CTRL_PORT, LCD_E, LOGIC_HIGH);
    1a94:	83 e0       	ldi	r24, 0x03	; 3
    1a96:	62 e0       	ldi	r22, 0x02	; 2
    1a98:	41 e0       	ldi	r20, 0x01	; 1
    1a9a:	0e 94 c5 12 	call	0x258a	; 0x258a <GPIO_writePin>
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	a0 e8       	ldi	r26, 0x80	; 128
    1aa4:	bf e3       	ldi	r27, 0x3F	; 63
    1aa6:	8f a3       	std	Y+39, r24	; 0x27
    1aa8:	98 a7       	std	Y+40, r25	; 0x28
    1aaa:	a9 a7       	std	Y+41, r26	; 0x29
    1aac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aae:	6f a1       	ldd	r22, Y+39	; 0x27
    1ab0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ab2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ab4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	4a e7       	ldi	r20, 0x7A	; 122
    1abc:	53 e4       	ldi	r21, 0x43	; 67
    1abe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	8b a3       	std	Y+35, r24	; 0x23
    1ac8:	9c a3       	std	Y+36, r25	; 0x24
    1aca:	ad a3       	std	Y+37, r26	; 0x25
    1acc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ace:	6b a1       	ldd	r22, Y+35	; 0x23
    1ad0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ad2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ad4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	40 e8       	ldi	r20, 0x80	; 128
    1adc:	5f e3       	ldi	r21, 0x3F	; 63
    1ade:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ae2:	88 23       	and	r24, r24
    1ae4:	2c f4       	brge	.+10     	; 0x1af0 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	9a a3       	std	Y+34, r25	; 0x22
    1aec:	89 a3       	std	Y+33, r24	; 0x21
    1aee:	3f c0       	rjmp	.+126    	; 0x1b6e <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1af0:	6b a1       	ldd	r22, Y+35	; 0x23
    1af2:	7c a1       	ldd	r23, Y+36	; 0x24
    1af4:	8d a1       	ldd	r24, Y+37	; 0x25
    1af6:	9e a1       	ldd	r25, Y+38	; 0x26
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	3f ef       	ldi	r19, 0xFF	; 255
    1afc:	4f e7       	ldi	r20, 0x7F	; 127
    1afe:	57 e4       	ldi	r21, 0x47	; 71
    1b00:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b04:	18 16       	cp	r1, r24
    1b06:	4c f5       	brge	.+82     	; 0x1b5a <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b08:	6f a1       	ldd	r22, Y+39	; 0x27
    1b0a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b0c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	40 e2       	ldi	r20, 0x20	; 32
    1b16:	51 e4       	ldi	r21, 0x41	; 65
    1b18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	bc 01       	movw	r22, r24
    1b22:	cd 01       	movw	r24, r26
    1b24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	9a a3       	std	Y+34, r25	; 0x22
    1b2e:	89 a3       	std	Y+33, r24	; 0x21
    1b30:	0f c0       	rjmp	.+30     	; 0x1b50 <LCD_displayCharacter+0x1c0>
    1b32:	89 e1       	ldi	r24, 0x19	; 25
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	98 a3       	std	Y+32, r25	; 0x20
    1b38:	8f 8f       	std	Y+31, r24	; 0x1f
    1b3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b3c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <LCD_displayCharacter+0x1ae>
    1b42:	98 a3       	std	Y+32, r25	; 0x20
    1b44:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b46:	89 a1       	ldd	r24, Y+33	; 0x21
    1b48:	9a a1       	ldd	r25, Y+34	; 0x22
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	9a a3       	std	Y+34, r25	; 0x22
    1b4e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b50:	89 a1       	ldd	r24, Y+33	; 0x21
    1b52:	9a a1       	ldd	r25, Y+34	; 0x22
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	69 f7       	brne	.-38     	; 0x1b32 <LCD_displayCharacter+0x1a2>
    1b58:	14 c0       	rjmp	.+40     	; 0x1b82 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b5c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b60:	9e a1       	ldd	r25, Y+38	; 0x26
    1b62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	9a a3       	std	Y+34, r25	; 0x22
    1b6c:	89 a3       	std	Y+33, r24	; 0x21
    1b6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b70:	9a a1       	ldd	r25, Y+34	; 0x22
    1b72:	9e 8f       	std	Y+30, r25	; 0x1e
    1b74:	8d 8f       	std	Y+29, r24	; 0x1d
    1b76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <LCD_displayCharacter+0x1ea>
    1b7e:	9e 8f       	std	Y+30, r25	; 0x1e
    1b80:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePort(LCD_DATA_PORT, data);
    1b82:	82 e0       	ldi	r24, 0x02	; 2
    1b84:	69 ad       	ldd	r22, Y+57	; 0x39
    1b86:	0e 94 8f 14 	call	0x291e	; 0x291e <GPIO_writePort>
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	a0 e8       	ldi	r26, 0x80	; 128
    1b90:	bf e3       	ldi	r27, 0x3F	; 63
    1b92:	89 8f       	std	Y+25, r24	; 0x19
    1b94:	9a 8f       	std	Y+26, r25	; 0x1a
    1b96:	ab 8f       	std	Y+27, r26	; 0x1b
    1b98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ba0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	4a e7       	ldi	r20, 0x7A	; 122
    1ba8:	53 e4       	ldi	r21, 0x43	; 67
    1baa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	8d 8b       	std	Y+21, r24	; 0x15
    1bb4:	9e 8b       	std	Y+22, r25	; 0x16
    1bb6:	af 8b       	std	Y+23, r26	; 0x17
    1bb8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bba:	6d 89       	ldd	r22, Y+21	; 0x15
    1bbc:	7e 89       	ldd	r23, Y+22	; 0x16
    1bbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e8       	ldi	r20, 0x80	; 128
    1bc8:	5f e3       	ldi	r21, 0x3F	; 63
    1bca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bce:	88 23       	and	r24, r24
    1bd0:	2c f4       	brge	.+10     	; 0x1bdc <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	9c 8b       	std	Y+20, r25	; 0x14
    1bd8:	8b 8b       	std	Y+19, r24	; 0x13
    1bda:	3f c0       	rjmp	.+126    	; 0x1c5a <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1bdc:	6d 89       	ldd	r22, Y+21	; 0x15
    1bde:	7e 89       	ldd	r23, Y+22	; 0x16
    1be0:	8f 89       	ldd	r24, Y+23	; 0x17
    1be2:	98 8d       	ldd	r25, Y+24	; 0x18
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	3f ef       	ldi	r19, 0xFF	; 255
    1be8:	4f e7       	ldi	r20, 0x7F	; 127
    1bea:	57 e4       	ldi	r21, 0x47	; 71
    1bec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bf0:	18 16       	cp	r1, r24
    1bf2:	4c f5       	brge	.+82     	; 0x1c46 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf4:	69 8d       	ldd	r22, Y+25	; 0x19
    1bf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e2       	ldi	r20, 0x20	; 32
    1c02:	51 e4       	ldi	r21, 0x41	; 65
    1c04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	bc 01       	movw	r22, r24
    1c0e:	cd 01       	movw	r24, r26
    1c10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	9c 8b       	std	Y+20, r25	; 0x14
    1c1a:	8b 8b       	std	Y+19, r24	; 0x13
    1c1c:	0f c0       	rjmp	.+30     	; 0x1c3c <LCD_displayCharacter+0x2ac>
    1c1e:	89 e1       	ldi	r24, 0x19	; 25
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	9a 8b       	std	Y+18, r25	; 0x12
    1c24:	89 8b       	std	Y+17, r24	; 0x11
    1c26:	89 89       	ldd	r24, Y+17	; 0x11
    1c28:	9a 89       	ldd	r25, Y+18	; 0x12
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <LCD_displayCharacter+0x29a>
    1c2e:	9a 8b       	std	Y+18, r25	; 0x12
    1c30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c32:	8b 89       	ldd	r24, Y+19	; 0x13
    1c34:	9c 89       	ldd	r25, Y+20	; 0x14
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	9c 8b       	std	Y+20, r25	; 0x14
    1c3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	69 f7       	brne	.-38     	; 0x1c1e <LCD_displayCharacter+0x28e>
    1c44:	14 c0       	rjmp	.+40     	; 0x1c6e <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c46:	6d 89       	ldd	r22, Y+21	; 0x15
    1c48:	7e 89       	ldd	r23, Y+22	; 0x16
    1c4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	9c 8b       	std	Y+20, r25	; 0x14
    1c58:	8b 8b       	std	Y+19, r24	; 0x13
    1c5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c5e:	98 8b       	std	Y+16, r25	; 0x10
    1c60:	8f 87       	std	Y+15, r24	; 0x0f
    1c62:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c64:	98 89       	ldd	r25, Y+16	; 0x10
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	f1 f7       	brne	.-4      	; 0x1c66 <LCD_displayCharacter+0x2d6>
    1c6a:	98 8b       	std	Y+16, r25	; 0x10
    1c6c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	GPIO_writePin(LCD_CTRL_PORT, LCD_E, LOGIC_LOW);
    1c6e:	83 e0       	ldi	r24, 0x03	; 3
    1c70:	62 e0       	ldi	r22, 0x02	; 2
    1c72:	40 e0       	ldi	r20, 0x00	; 0
    1c74:	0e 94 c5 12 	call	0x258a	; 0x258a <GPIO_writePin>
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	a0 e8       	ldi	r26, 0x80	; 128
    1c7e:	bf e3       	ldi	r27, 0x3F	; 63
    1c80:	8b 87       	std	Y+11, r24	; 0x0b
    1c82:	9c 87       	std	Y+12, r25	; 0x0c
    1c84:	ad 87       	std	Y+13, r26	; 0x0d
    1c86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	4a e7       	ldi	r20, 0x7A	; 122
    1c96:	53 e4       	ldi	r21, 0x43	; 67
    1c98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	8f 83       	std	Y+7, r24	; 0x07
    1ca2:	98 87       	std	Y+8, r25	; 0x08
    1ca4:	a9 87       	std	Y+9, r26	; 0x09
    1ca6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ca8:	6f 81       	ldd	r22, Y+7	; 0x07
    1caa:	78 85       	ldd	r23, Y+8	; 0x08
    1cac:	89 85       	ldd	r24, Y+9	; 0x09
    1cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	40 e8       	ldi	r20, 0x80	; 128
    1cb6:	5f e3       	ldi	r21, 0x3F	; 63
    1cb8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1cbc:	88 23       	and	r24, r24
    1cbe:	2c f4       	brge	.+10     	; 0x1cca <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	9e 83       	std	Y+6, r25	; 0x06
    1cc6:	8d 83       	std	Y+5, r24	; 0x05
    1cc8:	3f c0       	rjmp	.+126    	; 0x1d48 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1cca:	6f 81       	ldd	r22, Y+7	; 0x07
    1ccc:	78 85       	ldd	r23, Y+8	; 0x08
    1cce:	89 85       	ldd	r24, Y+9	; 0x09
    1cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	3f ef       	ldi	r19, 0xFF	; 255
    1cd6:	4f e7       	ldi	r20, 0x7F	; 127
    1cd8:	57 e4       	ldi	r21, 0x47	; 71
    1cda:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cde:	18 16       	cp	r1, r24
    1ce0:	4c f5       	brge	.+82     	; 0x1d34 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e2       	ldi	r20, 0x20	; 32
    1cf0:	51 e4       	ldi	r21, 0x41	; 65
    1cf2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	bc 01       	movw	r22, r24
    1cfc:	cd 01       	movw	r24, r26
    1cfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9e 83       	std	Y+6, r25	; 0x06
    1d08:	8d 83       	std	Y+5, r24	; 0x05
    1d0a:	0f c0       	rjmp	.+30     	; 0x1d2a <LCD_displayCharacter+0x39a>
    1d0c:	89 e1       	ldi	r24, 0x19	; 25
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	9c 83       	std	Y+4, r25	; 0x04
    1d12:	8b 83       	std	Y+3, r24	; 0x03
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	9c 81       	ldd	r25, Y+4	; 0x04
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	f1 f7       	brne	.-4      	; 0x1d18 <LCD_displayCharacter+0x388>
    1d1c:	9c 83       	std	Y+4, r25	; 0x04
    1d1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	9e 81       	ldd	r25, Y+6	; 0x06
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	9e 83       	std	Y+6, r25	; 0x06
    1d28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	69 f7       	brne	.-38     	; 0x1d0c <LCD_displayCharacter+0x37c>
    1d32:	14 c0       	rjmp	.+40     	; 0x1d5c <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d34:	6f 81       	ldd	r22, Y+7	; 0x07
    1d36:	78 85       	ldd	r23, Y+8	; 0x08
    1d38:	89 85       	ldd	r24, Y+9	; 0x09
    1d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	9e 83       	std	Y+6, r25	; 0x06
    1d46:	8d 83       	std	Y+5, r24	; 0x05
    1d48:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4c:	9a 83       	std	Y+2, r25	; 0x02
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <LCD_displayCharacter+0x3c4>
    1d58:	9a 83       	std	Y+2, r25	; 0x02
    1d5a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(data, 3));

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_CTRL_PORT, LCD_E, LOGIC_LOW); /* Disable LCD E=0 */
#endif
}
    1d5c:	e9 96       	adiw	r28, 0x39	; 57
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	de bf       	out	0x3e, r29	; 62
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	cd bf       	out	0x3d, r28	; 61
    1d68:	cf 91       	pop	r28
    1d6a:	df 91       	pop	r29
    1d6c:	08 95       	ret

00001d6e <LCD_displayString>:
 * Description:
 * Printing string on the LCD
 * Loop on the string
 * print each character with diplayCharacter function
 */
void LCD_displayString(uint8 *data) {
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	00 d0       	rcall	.+0      	; 0x1d74 <LCD_displayString+0x6>
    1d74:	0f 92       	push	r0
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	9b 83       	std	Y+3, r25	; 0x03
    1d7c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for (i = 0; *(data + i) != '\0'; i++) {
    1d7e:	19 82       	std	Y+1, r1	; 0x01
    1d80:	0e c0       	rjmp	.+28     	; 0x1d9e <LCD_displayString+0x30>
		LCD_displayCharacter(*(data + i));
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	e2 0f       	add	r30, r18
    1d90:	f3 1f       	adc	r31, r19
    1d92:	80 81       	ld	r24, Z
    1d94:	0e 94 c8 0c 	call	0x1990	; 0x1990 <LCD_displayCharacter>
 * Loop on the string
 * print each character with diplayCharacter function
 */
void LCD_displayString(uint8 *data) {
	uint8 i;
	for (i = 0; *(data + i) != '\0'; i++) {
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	8f 5f       	subi	r24, 0xFF	; 255
    1d9c:	89 83       	std	Y+1, r24	; 0x01
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	28 2f       	mov	r18, r24
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	9b 81       	ldd	r25, Y+3	; 0x03
    1da8:	fc 01       	movw	r30, r24
    1daa:	e2 0f       	add	r30, r18
    1dac:	f3 1f       	adc	r31, r19
    1dae:	80 81       	ld	r24, Z
    1db0:	88 23       	and	r24, r24
    1db2:	39 f7       	brne	.-50     	; 0x1d82 <LCD_displayString+0x14>
		LCD_displayCharacter(*(data + i));
	}
}
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret

00001dc0 <LCD_ClearDisplay>:

/*
 * Description:
 * Clearing LCD
 */
void LCD_ClearDisplay() {
    1dc0:	df 93       	push	r29
    1dc2:	cf 93       	push	r28
    1dc4:	cd b7       	in	r28, 0x3d	; 61
    1dc6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(0x01);
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <LCD_sendCommand>
}
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	08 95       	ret

00001dd4 <LCD_SetCursor>:
/*
 * Description:
 * Set the cursor to start in a certain position
 */
void LCD_SetCursor(uint8 row, uint8 col) {
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	00 d0       	rcall	.+0      	; 0x1dda <LCD_SetCursor+0x6>
    1dda:	00 d0       	rcall	.+0      	; 0x1ddc <LCD_SetCursor+0x8>
    1ddc:	0f 92       	push	r0
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
    1de2:	8a 83       	std	Y+2, r24	; 0x02
    1de4:	6b 83       	std	Y+3, r22	; 0x03

	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch (row) {
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	3d 83       	std	Y+5, r19	; 0x05
    1dee:	2c 83       	std	Y+4, r18	; 0x04
    1df0:	8c 81       	ldd	r24, Y+4	; 0x04
    1df2:	9d 81       	ldd	r25, Y+5	; 0x05
    1df4:	81 30       	cpi	r24, 0x01	; 1
    1df6:	91 05       	cpc	r25, r1
    1df8:	c1 f0       	breq	.+48     	; 0x1e2a <LCD_SetCursor+0x56>
    1dfa:	2c 81       	ldd	r18, Y+4	; 0x04
    1dfc:	3d 81       	ldd	r19, Y+5	; 0x05
    1dfe:	22 30       	cpi	r18, 0x02	; 2
    1e00:	31 05       	cpc	r19, r1
    1e02:	2c f4       	brge	.+10     	; 0x1e0e <LCD_SetCursor+0x3a>
    1e04:	8c 81       	ldd	r24, Y+4	; 0x04
    1e06:	9d 81       	ldd	r25, Y+5	; 0x05
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	61 f0       	breq	.+24     	; 0x1e24 <LCD_SetCursor+0x50>
    1e0c:	19 c0       	rjmp	.+50     	; 0x1e40 <LCD_SetCursor+0x6c>
    1e0e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e10:	3d 81       	ldd	r19, Y+5	; 0x05
    1e12:	22 30       	cpi	r18, 0x02	; 2
    1e14:	31 05       	cpc	r19, r1
    1e16:	69 f0       	breq	.+26     	; 0x1e32 <LCD_SetCursor+0x5e>
    1e18:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e1c:	83 30       	cpi	r24, 0x03	; 3
    1e1e:	91 05       	cpc	r25, r1
    1e20:	61 f0       	breq	.+24     	; 0x1e3a <LCD_SetCursor+0x66>
    1e22:	0e c0       	rjmp	.+28     	; 0x1e40 <LCD_SetCursor+0x6c>
	case 0:
		lcd_memory_address = col;
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	0b c0       	rjmp	.+22     	; 0x1e40 <LCD_SetCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col + 0x40;
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	80 5c       	subi	r24, 0xC0	; 192
    1e2e:	89 83       	std	Y+1, r24	; 0x01
    1e30:	07 c0       	rjmp	.+14     	; 0x1e40 <LCD_SetCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col + 0x10;
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	80 5f       	subi	r24, 0xF0	; 240
    1e36:	89 83       	std	Y+1, r24	; 0x01
    1e38:	03 c0       	rjmp	.+6      	; 0x1e40 <LCD_SetCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col + 0x50;
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	80 5b       	subi	r24, 0xB0	; 176
    1e3e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | 0x80);
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	80 68       	ori	r24, 0x80	; 128
    1e44:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <LCD_sendCommand>
}
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <LCD_PrintSigned32BitNum>:
/*
 * Description:
 * print 4 bytes signed numbers
 */
void LCD_PrintSigned32BitNum(sint32 num) {
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
    1e60:	2a 97       	sbiw	r28, 0x0a	; 10
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	f8 94       	cli
    1e66:	de bf       	out	0x3e, r29	; 62
    1e68:	0f be       	out	0x3f, r0	; 63
    1e6a:	cd bf       	out	0x3d, r28	; 61
    1e6c:	6f 83       	std	Y+7, r22	; 0x07
    1e6e:	78 87       	std	Y+8, r23	; 0x08
    1e70:	89 87       	std	Y+9, r24	; 0x09
    1e72:	9a 87       	std	Y+10, r25	; 0x0a
	/*check if the number is negative and prints - and make it positive*/
	if (num < 0) {
    1e74:	8f 81       	ldd	r24, Y+7	; 0x07
    1e76:	98 85       	ldd	r25, Y+8	; 0x08
    1e78:	a9 85       	ldd	r26, Y+9	; 0x09
    1e7a:	ba 85       	ldd	r27, Y+10	; 0x0a
    1e7c:	bb 23       	and	r27, r27
    1e7e:	94 f4       	brge	.+36     	; 0x1ea4 <LCD_PrintSigned32BitNum+0x4c>
		LCD_displayCharacter('-');
    1e80:	8d e2       	ldi	r24, 0x2D	; 45
    1e82:	0e 94 c8 0c 	call	0x1990	; 0x1990 <LCD_displayCharacter>
		num = -num;
    1e86:	8f 81       	ldd	r24, Y+7	; 0x07
    1e88:	98 85       	ldd	r25, Y+8	; 0x08
    1e8a:	a9 85       	ldd	r26, Y+9	; 0x09
    1e8c:	ba 85       	ldd	r27, Y+10	; 0x0a
    1e8e:	b0 95       	com	r27
    1e90:	a0 95       	com	r26
    1e92:	90 95       	com	r25
    1e94:	81 95       	neg	r24
    1e96:	9f 4f       	sbci	r25, 0xFF	; 255
    1e98:	af 4f       	sbci	r26, 0xFF	; 255
    1e9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e9c:	8f 83       	std	Y+7, r24	; 0x07
    1e9e:	98 87       	std	Y+8, r25	; 0x08
    1ea0:	a9 87       	std	Y+9, r26	; 0x09
    1ea2:	ba 87       	std	Y+10, r27	; 0x0a
	}
	/*
	 * check if the number is float "has digits after the decimal point and prints the digits before the point and
	 * the digits after the point
	 */
	if ((num * 100) % 100 != 0) {
    1ea4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ea6:	98 85       	ldd	r25, Y+8	; 0x08
    1ea8:	a9 85       	ldd	r26, Y+9	; 0x09
    1eaa:	ba 85       	ldd	r27, Y+10	; 0x0a
    1eac:	24 e6       	ldi	r18, 0x64	; 100
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e0       	ldi	r20, 0x00	; 0
    1eb2:	50 e0       	ldi	r21, 0x00	; 0
    1eb4:	bc 01       	movw	r22, r24
    1eb6:	cd 01       	movw	r24, r26
    1eb8:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <__mulsi3>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	24 e6       	ldi	r18, 0x64	; 100
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	40 e0       	ldi	r20, 0x00	; 0
    1ec6:	50 e0       	ldi	r21, 0x00	; 0
    1ec8:	bc 01       	movw	r22, r24
    1eca:	cd 01       	movw	r24, r26
    1ecc:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__divmodsi4>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	00 97       	sbiw	r24, 0x00	; 0
    1ed6:	a1 05       	cpc	r26, r1
    1ed8:	b1 05       	cpc	r27, r1
    1eda:	41 f1       	breq	.+80     	; 0x1f2c <LCD_PrintSigned32BitNum+0xd4>
		LCD_PrintSigned32BitNum((sint32) num);
    1edc:	8f 81       	ldd	r24, Y+7	; 0x07
    1ede:	98 85       	ldd	r25, Y+8	; 0x08
    1ee0:	a9 85       	ldd	r26, Y+9	; 0x09
    1ee2:	ba 85       	ldd	r27, Y+10	; 0x0a
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	cd 01       	movw	r24, r26
    1ee8:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <LCD_PrintSigned32BitNum>
		LCD_displayCharacter('.');
    1eec:	8e e2       	ldi	r24, 0x2E	; 46
    1eee:	0e 94 c8 0c 	call	0x1990	; 0x1990 <LCD_displayCharacter>
		LCD_PrintSigned32BitNum((num * 100) % 100);
    1ef2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ef4:	98 85       	ldd	r25, Y+8	; 0x08
    1ef6:	a9 85       	ldd	r26, Y+9	; 0x09
    1ef8:	ba 85       	ldd	r27, Y+10	; 0x0a
    1efa:	24 e6       	ldi	r18, 0x64	; 100
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	40 e0       	ldi	r20, 0x00	; 0
    1f00:	50 e0       	ldi	r21, 0x00	; 0
    1f02:	bc 01       	movw	r22, r24
    1f04:	cd 01       	movw	r24, r26
    1f06:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <__mulsi3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	24 e6       	ldi	r18, 0x64	; 100
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	40 e0       	ldi	r20, 0x00	; 0
    1f14:	50 e0       	ldi	r21, 0x00	; 0
    1f16:	bc 01       	movw	r22, r24
    1f18:	cd 01       	movw	r24, r26
    1f1a:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__divmodsi4>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	bc 01       	movw	r22, r24
    1f24:	cd 01       	movw	r24, r26
    1f26:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <LCD_PrintSigned32BitNum>
    1f2a:	89 c0       	rjmp	.+274    	; 0x203e <LCD_PrintSigned32BitNum+0x1e6>
	} else {
		sint32 num1 = num;
    1f2c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f2e:	98 85       	ldd	r25, Y+8	; 0x08
    1f30:	a9 85       	ldd	r26, Y+9	; 0x09
    1f32:	ba 85       	ldd	r27, Y+10	; 0x0a
    1f34:	8b 83       	std	Y+3, r24	; 0x03
    1f36:	9c 83       	std	Y+4, r25	; 0x04
    1f38:	ad 83       	std	Y+5, r26	; 0x05
    1f3a:	be 83       	std	Y+6, r27	; 0x06
		uint16 L_u8Counter = 1;
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	9a 83       	std	Y+2, r25	; 0x02
    1f42:	89 83       	std	Y+1, r24	; 0x01

		if (num < 10)
    1f44:	8f 81       	ldd	r24, Y+7	; 0x07
    1f46:	98 85       	ldd	r25, Y+8	; 0x08
    1f48:	a9 85       	ldd	r26, Y+9	; 0x09
    1f4a:	ba 85       	ldd	r27, Y+10	; 0x0a
    1f4c:	8a 30       	cpi	r24, 0x0A	; 10
    1f4e:	91 05       	cpc	r25, r1
    1f50:	a1 05       	cpc	r26, r1
    1f52:	b1 05       	cpc	r27, r1
    1f54:	2c f5       	brge	.+74     	; 0x1fa0 <LCD_PrintSigned32BitNum+0x148>
			LCD_displayCharacter(num + '0');
    1f56:	8f 81       	ldd	r24, Y+7	; 0x07
    1f58:	80 5d       	subi	r24, 0xD0	; 208
    1f5a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <LCD_displayCharacter>
    1f5e:	6f c0       	rjmp	.+222    	; 0x203e <LCD_PrintSigned32BitNum+0x1e6>
		else {
			/*find the value of the number "hundreds,thousands ... " */
			while (num >= 10) {
				num /= 10;
    1f60:	8f 81       	ldd	r24, Y+7	; 0x07
    1f62:	98 85       	ldd	r25, Y+8	; 0x08
    1f64:	a9 85       	ldd	r26, Y+9	; 0x09
    1f66:	ba 85       	ldd	r27, Y+10	; 0x0a
    1f68:	2a e0       	ldi	r18, 0x0A	; 10
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e0       	ldi	r20, 0x00	; 0
    1f6e:	50 e0       	ldi	r21, 0x00	; 0
    1f70:	bc 01       	movw	r22, r24
    1f72:	cd 01       	movw	r24, r26
    1f74:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__divmodsi4>
    1f78:	da 01       	movw	r26, r20
    1f7a:	c9 01       	movw	r24, r18
    1f7c:	8f 83       	std	Y+7, r24	; 0x07
    1f7e:	98 87       	std	Y+8, r25	; 0x08
    1f80:	a9 87       	std	Y+9, r26	; 0x09
    1f82:	ba 87       	std	Y+10, r27	; 0x0a
				L_u8Counter *= 10;
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	9a 81       	ldd	r25, Y+2	; 0x02
    1f88:	9c 01       	movw	r18, r24
    1f8a:	22 0f       	add	r18, r18
    1f8c:	33 1f       	adc	r19, r19
    1f8e:	c9 01       	movw	r24, r18
    1f90:	88 0f       	add	r24, r24
    1f92:	99 1f       	adc	r25, r25
    1f94:	88 0f       	add	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	82 0f       	add	r24, r18
    1f9a:	93 1f       	adc	r25, r19
    1f9c:	9a 83       	std	Y+2, r25	; 0x02
    1f9e:	89 83       	std	Y+1, r24	; 0x01

		if (num < 10)
			LCD_displayCharacter(num + '0');
		else {
			/*find the value of the number "hundreds,thousands ... " */
			while (num >= 10) {
    1fa0:	8f 81       	ldd	r24, Y+7	; 0x07
    1fa2:	98 85       	ldd	r25, Y+8	; 0x08
    1fa4:	a9 85       	ldd	r26, Y+9	; 0x09
    1fa6:	ba 85       	ldd	r27, Y+10	; 0x0a
    1fa8:	8a 30       	cpi	r24, 0x0A	; 10
    1faa:	91 05       	cpc	r25, r1
    1fac:	a1 05       	cpc	r26, r1
    1fae:	b1 05       	cpc	r27, r1
    1fb0:	bc f6       	brge	.-82     	; 0x1f60 <LCD_PrintSigned32BitNum+0x108>
    1fb2:	40 c0       	rjmp	.+128    	; 0x2034 <LCD_PrintSigned32BitNum+0x1dc>
				num /= 10;
				L_u8Counter *= 10;
			}
			while (L_u8Counter >= 1) {
				num = num1;
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb8:	ad 81       	ldd	r26, Y+5	; 0x05
    1fba:	be 81       	ldd	r27, Y+6	; 0x06
    1fbc:	8f 83       	std	Y+7, r24	; 0x07
    1fbe:	98 87       	std	Y+8, r25	; 0x08
    1fc0:	a9 87       	std	Y+9, r26	; 0x09
    1fc2:	ba 87       	std	Y+10, r27	; 0x0a
				num1 = num % L_u8Counter;
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc8:	9c 01       	movw	r18, r24
    1fca:	40 e0       	ldi	r20, 0x00	; 0
    1fcc:	50 e0       	ldi	r21, 0x00	; 0
    1fce:	8f 81       	ldd	r24, Y+7	; 0x07
    1fd0:	98 85       	ldd	r25, Y+8	; 0x08
    1fd2:	a9 85       	ldd	r26, Y+9	; 0x09
    1fd4:	ba 85       	ldd	r27, Y+10	; 0x0a
    1fd6:	bc 01       	movw	r22, r24
    1fd8:	cd 01       	movw	r24, r26
    1fda:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__divmodsi4>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	8b 83       	std	Y+3, r24	; 0x03
    1fe4:	9c 83       	std	Y+4, r25	; 0x04
    1fe6:	ad 83       	std	Y+5, r26	; 0x05
    1fe8:	be 83       	std	Y+6, r27	; 0x06
				num /= L_u8Counter;
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	9a 81       	ldd	r25, Y+2	; 0x02
    1fee:	9c 01       	movw	r18, r24
    1ff0:	40 e0       	ldi	r20, 0x00	; 0
    1ff2:	50 e0       	ldi	r21, 0x00	; 0
    1ff4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ff6:	98 85       	ldd	r25, Y+8	; 0x08
    1ff8:	a9 85       	ldd	r26, Y+9	; 0x09
    1ffa:	ba 85       	ldd	r27, Y+10	; 0x0a
    1ffc:	bc 01       	movw	r22, r24
    1ffe:	cd 01       	movw	r24, r26
    2000:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__divmodsi4>
    2004:	da 01       	movw	r26, r20
    2006:	c9 01       	movw	r24, r18
    2008:	8f 83       	std	Y+7, r24	; 0x07
    200a:	98 87       	std	Y+8, r25	; 0x08
    200c:	a9 87       	std	Y+9, r26	; 0x09
    200e:	ba 87       	std	Y+10, r27	; 0x0a
				L_u8Counter /= 10;
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	9a 81       	ldd	r25, Y+2	; 0x02
    2014:	2a e0       	ldi	r18, 0x0A	; 10
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	b9 01       	movw	r22, r18
    201a:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__udivmodhi4>
    201e:	cb 01       	movw	r24, r22
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	89 83       	std	Y+1, r24	; 0x01
				LCD_PrintSigned32BitNum(num);
    2024:	8f 81       	ldd	r24, Y+7	; 0x07
    2026:	98 85       	ldd	r25, Y+8	; 0x08
    2028:	a9 85       	ldd	r26, Y+9	; 0x09
    202a:	ba 85       	ldd	r27, Y+10	; 0x0a
    202c:	bc 01       	movw	r22, r24
    202e:	cd 01       	movw	r24, r26
    2030:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <LCD_PrintSigned32BitNum>
			/*find the value of the number "hundreds,thousands ... " */
			while (num >= 10) {
				num /= 10;
				L_u8Counter *= 10;
			}
			while (L_u8Counter >= 1) {
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	9a 81       	ldd	r25, Y+2	; 0x02
    2038:	00 97       	sbiw	r24, 0x00	; 0
    203a:	09 f0       	breq	.+2      	; 0x203e <LCD_PrintSigned32BitNum+0x1e6>
    203c:	bb cf       	rjmp	.-138    	; 0x1fb4 <LCD_PrintSigned32BitNum+0x15c>
				LCD_PrintSigned32BitNum(num);
			}

		}
	}
}
    203e:	2a 96       	adiw	r28, 0x0a	; 10
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	de bf       	out	0x3e, r29	; 62
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	cd bf       	out	0x3d, r28	; 61
    204a:	cf 91       	pop	r28
    204c:	df 91       	pop	r29
    204e:	08 95       	ret

00002050 <LCD_PrintNum16Bit>:
/*
 * Description:
 * print 2 bytes unsigned numbers
 */
void LCD_PrintNum16Bit(uint16 num) {
    2050:	df 93       	push	r29
    2052:	cf 93       	push	r28
    2054:	00 d0       	rcall	.+0      	; 0x2056 <LCD_PrintNum16Bit+0x6>
    2056:	00 d0       	rcall	.+0      	; 0x2058 <LCD_PrintNum16Bit+0x8>
    2058:	00 d0       	rcall	.+0      	; 0x205a <LCD_PrintNum16Bit+0xa>
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
    205e:	9e 83       	std	Y+6, r25	; 0x06
    2060:	8d 83       	std	Y+5, r24	; 0x05

	uint16 num1 = num;
    2062:	8d 81       	ldd	r24, Y+5	; 0x05
    2064:	9e 81       	ldd	r25, Y+6	; 0x06
    2066:	9c 83       	std	Y+4, r25	; 0x04
    2068:	8b 83       	std	Y+3, r24	; 0x03
	uint16 L_u8Counter = 1;
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	9a 83       	std	Y+2, r25	; 0x02
    2070:	89 83       	std	Y+1, r24	; 0x01
	if (num < 10)
    2072:	8d 81       	ldd	r24, Y+5	; 0x05
    2074:	9e 81       	ldd	r25, Y+6	; 0x06
    2076:	8a 30       	cpi	r24, 0x0A	; 10
    2078:	91 05       	cpc	r25, r1
    207a:	e8 f4       	brcc	.+58     	; 0x20b6 <LCD_PrintNum16Bit+0x66>
		LCD_displayCharacter(num + '0');
    207c:	8d 81       	ldd	r24, Y+5	; 0x05
    207e:	80 5d       	subi	r24, 0xD0	; 208
    2080:	0e 94 c8 0c 	call	0x1990	; 0x1990 <LCD_displayCharacter>
    2084:	4c c0       	rjmp	.+152    	; 0x211e <LCD_PrintNum16Bit+0xce>
	else {
		/*find the value of the number "hundreds,thousands ... " */
		while (num >= 10) {
			num /= 10;
    2086:	8d 81       	ldd	r24, Y+5	; 0x05
    2088:	9e 81       	ldd	r25, Y+6	; 0x06
    208a:	2a e0       	ldi	r18, 0x0A	; 10
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	b9 01       	movw	r22, r18
    2090:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__udivmodhi4>
    2094:	cb 01       	movw	r24, r22
    2096:	9e 83       	std	Y+6, r25	; 0x06
    2098:	8d 83       	std	Y+5, r24	; 0x05
			L_u8Counter *= 10;
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	9a 81       	ldd	r25, Y+2	; 0x02
    209e:	9c 01       	movw	r18, r24
    20a0:	22 0f       	add	r18, r18
    20a2:	33 1f       	adc	r19, r19
    20a4:	c9 01       	movw	r24, r18
    20a6:	88 0f       	add	r24, r24
    20a8:	99 1f       	adc	r25, r25
    20aa:	88 0f       	add	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	82 0f       	add	r24, r18
    20b0:	93 1f       	adc	r25, r19
    20b2:	9a 83       	std	Y+2, r25	; 0x02
    20b4:	89 83       	std	Y+1, r24	; 0x01
	uint16 L_u8Counter = 1;
	if (num < 10)
		LCD_displayCharacter(num + '0');
	else {
		/*find the value of the number "hundreds,thousands ... " */
		while (num >= 10) {
    20b6:	8d 81       	ldd	r24, Y+5	; 0x05
    20b8:	9e 81       	ldd	r25, Y+6	; 0x06
    20ba:	8a 30       	cpi	r24, 0x0A	; 10
    20bc:	91 05       	cpc	r25, r1
    20be:	18 f7       	brcc	.-58     	; 0x2086 <LCD_PrintNum16Bit+0x36>
    20c0:	2a c0       	rjmp	.+84     	; 0x2116 <LCD_PrintNum16Bit+0xc6>
			num /= 10;
			L_u8Counter *= 10;
		}
		while (L_u8Counter >= 1) {
			num = num1;
    20c2:	8b 81       	ldd	r24, Y+3	; 0x03
    20c4:	9c 81       	ldd	r25, Y+4	; 0x04
    20c6:	9e 83       	std	Y+6, r25	; 0x06
    20c8:	8d 83       	std	Y+5, r24	; 0x05
			num1 = num % L_u8Counter;
    20ca:	8d 81       	ldd	r24, Y+5	; 0x05
    20cc:	9e 81       	ldd	r25, Y+6	; 0x06
    20ce:	29 81       	ldd	r18, Y+1	; 0x01
    20d0:	3a 81       	ldd	r19, Y+2	; 0x02
    20d2:	b9 01       	movw	r22, r18
    20d4:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__udivmodhi4>
    20d8:	9c 83       	std	Y+4, r25	; 0x04
    20da:	8b 83       	std	Y+3, r24	; 0x03
			num /= L_u8Counter;
    20dc:	8d 81       	ldd	r24, Y+5	; 0x05
    20de:	9e 81       	ldd	r25, Y+6	; 0x06
    20e0:	29 81       	ldd	r18, Y+1	; 0x01
    20e2:	3a 81       	ldd	r19, Y+2	; 0x02
    20e4:	b9 01       	movw	r22, r18
    20e6:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__udivmodhi4>
    20ea:	cb 01       	movw	r24, r22
    20ec:	9e 83       	std	Y+6, r25	; 0x06
    20ee:	8d 83       	std	Y+5, r24	; 0x05
			L_u8Counter /= 10;
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	9a 81       	ldd	r25, Y+2	; 0x02
    20f4:	2a e0       	ldi	r18, 0x0A	; 10
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	b9 01       	movw	r22, r18
    20fa:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__udivmodhi4>
    20fe:	cb 01       	movw	r24, r22
    2100:	9a 83       	std	Y+2, r25	; 0x02
    2102:	89 83       	std	Y+1, r24	; 0x01
			LCD_PrintSigned32BitNum(num);
    2104:	8d 81       	ldd	r24, Y+5	; 0x05
    2106:	9e 81       	ldd	r25, Y+6	; 0x06
    2108:	cc 01       	movw	r24, r24
    210a:	a0 e0       	ldi	r26, 0x00	; 0
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	bc 01       	movw	r22, r24
    2110:	cd 01       	movw	r24, r26
    2112:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <LCD_PrintSigned32BitNum>
		/*find the value of the number "hundreds,thousands ... " */
		while (num >= 10) {
			num /= 10;
			L_u8Counter *= 10;
		}
		while (L_u8Counter >= 1) {
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	9a 81       	ldd	r25, Y+2	; 0x02
    211a:	00 97       	sbiw	r24, 0x00	; 0
    211c:	91 f6       	brne	.-92     	; 0x20c2 <LCD_PrintNum16Bit+0x72>
			LCD_PrintSigned32BitNum(num);
		}

	}

}
    211e:	26 96       	adiw	r28, 0x06	; 6
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	cd bf       	out	0x3d, r28	; 61
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	08 95       	ret

00002130 <LCD_PrintNumFloat>:
/*
 * Description:
 * print 4 bytes float numbers
 */
void LCD_PrintNumFloat(float32 num) {
    2130:	ef 92       	push	r14
    2132:	ff 92       	push	r15
    2134:	0f 93       	push	r16
    2136:	1f 93       	push	r17
    2138:	df 93       	push	r29
    213a:	cf 93       	push	r28
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
    2140:	2a 97       	sbiw	r28, 0x0a	; 10
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	f8 94       	cli
    2146:	de bf       	out	0x3e, r29	; 62
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	cd bf       	out	0x3d, r28	; 61
    214c:	6f 83       	std	Y+7, r22	; 0x07
    214e:	78 87       	std	Y+8, r23	; 0x08
    2150:	89 87       	std	Y+9, r24	; 0x09
    2152:	9a 87       	std	Y+10, r25	; 0x0a
	/*check if the number is negative and prints - and make it positive*/

	if (num < 0) {
    2154:	6f 81       	ldd	r22, Y+7	; 0x07
    2156:	78 85       	ldd	r23, Y+8	; 0x08
    2158:	89 85       	ldd	r24, Y+9	; 0x09
    215a:	9a 85       	ldd	r25, Y+10	; 0x0a
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e0       	ldi	r20, 0x00	; 0
    2162:	50 e0       	ldi	r21, 0x00	; 0
    2164:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2168:	88 23       	and	r24, r24
    216a:	64 f4       	brge	.+24     	; 0x2184 <LCD_PrintNumFloat+0x54>
		LCD_displayCharacter('-');
    216c:	8d e2       	ldi	r24, 0x2D	; 45
    216e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <LCD_displayCharacter>
		num = -num;
    2172:	8f 81       	ldd	r24, Y+7	; 0x07
    2174:	98 85       	ldd	r25, Y+8	; 0x08
    2176:	a9 85       	ldd	r26, Y+9	; 0x09
    2178:	ba 85       	ldd	r27, Y+10	; 0x0a
    217a:	b0 58       	subi	r27, 0x80	; 128
    217c:	8f 83       	std	Y+7, r24	; 0x07
    217e:	98 87       	std	Y+8, r25	; 0x08
    2180:	a9 87       	std	Y+9, r26	; 0x09
    2182:	ba 87       	std	Y+10, r27	; 0x0a
	}
	/*
	 * check if the number is float "has digits after the decimal point and prints the digits before the point and
	 * the digits after the point
	 */
	if ((sint32) (num * 100) % 100 != 0) {
    2184:	6f 81       	ldd	r22, Y+7	; 0x07
    2186:	78 85       	ldd	r23, Y+8	; 0x08
    2188:	89 85       	ldd	r24, Y+9	; 0x09
    218a:	9a 85       	ldd	r25, Y+10	; 0x0a
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	48 ec       	ldi	r20, 0xC8	; 200
    2192:	52 e4       	ldi	r21, 0x42	; 66
    2194:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	bc 01       	movw	r22, r24
    219e:	cd 01       	movw	r24, r26
    21a0:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	24 e6       	ldi	r18, 0x64	; 100
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e0       	ldi	r20, 0x00	; 0
    21ae:	50 e0       	ldi	r21, 0x00	; 0
    21b0:	bc 01       	movw	r22, r24
    21b2:	cd 01       	movw	r24, r26
    21b4:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__divmodsi4>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	a1 05       	cpc	r26, r1
    21c0:	b1 05       	cpc	r27, r1
    21c2:	e1 f1       	breq	.+120    	; 0x223c <LCD_PrintNumFloat+0x10c>
		LCD_PrintNumFloat((sint32) num);
    21c4:	6f 81       	ldd	r22, Y+7	; 0x07
    21c6:	78 85       	ldd	r23, Y+8	; 0x08
    21c8:	89 85       	ldd	r24, Y+9	; 0x09
    21ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    21cc:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	bc 01       	movw	r22, r24
    21d6:	cd 01       	movw	r24, r26
    21d8:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	bc 01       	movw	r22, r24
    21e2:	cd 01       	movw	r24, r26
    21e4:	0e 94 98 10 	call	0x2130	; 0x2130 <LCD_PrintNumFloat>
		LCD_displayCharacter('.');
    21e8:	8e e2       	ldi	r24, 0x2E	; 46
    21ea:	0e 94 c8 0c 	call	0x1990	; 0x1990 <LCD_displayCharacter>
		LCD_PrintNumFloat((sint32) (num * 100) % 100);
    21ee:	6f 81       	ldd	r22, Y+7	; 0x07
    21f0:	78 85       	ldd	r23, Y+8	; 0x08
    21f2:	89 85       	ldd	r24, Y+9	; 0x09
    21f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	48 ec       	ldi	r20, 0xC8	; 200
    21fc:	52 e4       	ldi	r21, 0x42	; 66
    21fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	bc 01       	movw	r22, r24
    2208:	cd 01       	movw	r24, r26
    220a:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	24 e6       	ldi	r18, 0x64	; 100
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e0       	ldi	r20, 0x00	; 0
    2218:	50 e0       	ldi	r21, 0x00	; 0
    221a:	bc 01       	movw	r22, r24
    221c:	cd 01       	movw	r24, r26
    221e:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__divmodsi4>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	bc 01       	movw	r22, r24
    2228:	cd 01       	movw	r24, r26
    222a:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	bc 01       	movw	r22, r24
    2234:	cd 01       	movw	r24, r26
    2236:	0e 94 98 10 	call	0x2130	; 0x2130 <LCD_PrintNumFloat>
    223a:	af c0       	rjmp	.+350    	; 0x239a <LCD_PrintNumFloat+0x26a>
	} else {
		float32 num1 = num;
    223c:	8f 81       	ldd	r24, Y+7	; 0x07
    223e:	98 85       	ldd	r25, Y+8	; 0x08
    2240:	a9 85       	ldd	r26, Y+9	; 0x09
    2242:	ba 85       	ldd	r27, Y+10	; 0x0a
    2244:	8b 83       	std	Y+3, r24	; 0x03
    2246:	9c 83       	std	Y+4, r25	; 0x04
    2248:	ad 83       	std	Y+5, r26	; 0x05
    224a:	be 83       	std	Y+6, r27	; 0x06
		uint16 L_u8Counter = 1;
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	9a 83       	std	Y+2, r25	; 0x02
    2252:	89 83       	std	Y+1, r24	; 0x01
		if (num < 10)
    2254:	6f 81       	ldd	r22, Y+7	; 0x07
    2256:	78 85       	ldd	r23, Y+8	; 0x08
    2258:	89 85       	ldd	r24, Y+9	; 0x09
    225a:	9a 85       	ldd	r25, Y+10	; 0x0a
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	40 e2       	ldi	r20, 0x20	; 32
    2262:	51 e4       	ldi	r21, 0x41	; 65
    2264:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2268:	88 23       	and	r24, r24
    226a:	9c f5       	brge	.+102    	; 0x22d2 <LCD_PrintNumFloat+0x1a2>
			LCD_displayCharacter(num + '0');
    226c:	6f 81       	ldd	r22, Y+7	; 0x07
    226e:	78 85       	ldd	r23, Y+8	; 0x08
    2270:	89 85       	ldd	r24, Y+9	; 0x09
    2272:	9a 85       	ldd	r25, Y+10	; 0x0a
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	40 e4       	ldi	r20, 0x40	; 64
    227a:	52 e4       	ldi	r21, 0x42	; 66
    227c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	bc 01       	movw	r22, r24
    2286:	cd 01       	movw	r24, r26
    2288:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	0e 94 c8 0c 	call	0x1990	; 0x1990 <LCD_displayCharacter>
    2294:	82 c0       	rjmp	.+260    	; 0x239a <LCD_PrintNumFloat+0x26a>
		else {
			/*find the value of the number "hundreds,thousands ... " */
			while (num >= 10) {
				num /= 10;
    2296:	6f 81       	ldd	r22, Y+7	; 0x07
    2298:	78 85       	ldd	r23, Y+8	; 0x08
    229a:	89 85       	ldd	r24, Y+9	; 0x09
    229c:	9a 85       	ldd	r25, Y+10	; 0x0a
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e2       	ldi	r20, 0x20	; 32
    22a4:	51 e4       	ldi	r21, 0x41	; 65
    22a6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	8f 83       	std	Y+7, r24	; 0x07
    22b0:	98 87       	std	Y+8, r25	; 0x08
    22b2:	a9 87       	std	Y+9, r26	; 0x09
    22b4:	ba 87       	std	Y+10, r27	; 0x0a
				L_u8Counter *= 10;
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ba:	9c 01       	movw	r18, r24
    22bc:	22 0f       	add	r18, r18
    22be:	33 1f       	adc	r19, r19
    22c0:	c9 01       	movw	r24, r18
    22c2:	88 0f       	add	r24, r24
    22c4:	99 1f       	adc	r25, r25
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	82 0f       	add	r24, r18
    22cc:	93 1f       	adc	r25, r19
    22ce:	9a 83       	std	Y+2, r25	; 0x02
    22d0:	89 83       	std	Y+1, r24	; 0x01
		uint16 L_u8Counter = 1;
		if (num < 10)
			LCD_displayCharacter(num + '0');
		else {
			/*find the value of the number "hundreds,thousands ... " */
			while (num >= 10) {
    22d2:	6f 81       	ldd	r22, Y+7	; 0x07
    22d4:	78 85       	ldd	r23, Y+8	; 0x08
    22d6:	89 85       	ldd	r24, Y+9	; 0x09
    22d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	40 e2       	ldi	r20, 0x20	; 32
    22e0:	51 e4       	ldi	r21, 0x41	; 65
    22e2:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
    22e6:	88 23       	and	r24, r24
    22e8:	b4 f6       	brge	.-84     	; 0x2296 <LCD_PrintNumFloat+0x166>
    22ea:	52 c0       	rjmp	.+164    	; 0x2390 <LCD_PrintNumFloat+0x260>
				num /= 10;
				L_u8Counter *= 10;
			}
			while (L_u8Counter >= 1) {
				num = num1;
    22ec:	8b 81       	ldd	r24, Y+3	; 0x03
    22ee:	9c 81       	ldd	r25, Y+4	; 0x04
    22f0:	ad 81       	ldd	r26, Y+5	; 0x05
    22f2:	be 81       	ldd	r27, Y+6	; 0x06
    22f4:	8f 83       	std	Y+7, r24	; 0x07
    22f6:	98 87       	std	Y+8, r25	; 0x08
    22f8:	a9 87       	std	Y+9, r26	; 0x09
    22fa:	ba 87       	std	Y+10, r27	; 0x0a
				num1 = (sint32) num % L_u8Counter;
    22fc:	6f 81       	ldd	r22, Y+7	; 0x07
    22fe:	78 85       	ldd	r23, Y+8	; 0x08
    2300:	89 85       	ldd	r24, Y+9	; 0x09
    2302:	9a 85       	ldd	r25, Y+10	; 0x0a
    2304:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    2308:	7b 01       	movw	r14, r22
    230a:	8c 01       	movw	r16, r24
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	9a 81       	ldd	r25, Y+2	; 0x02
    2310:	9c 01       	movw	r18, r24
    2312:	40 e0       	ldi	r20, 0x00	; 0
    2314:	50 e0       	ldi	r21, 0x00	; 0
    2316:	c8 01       	movw	r24, r16
    2318:	b7 01       	movw	r22, r14
    231a:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__divmodsi4>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	bc 01       	movw	r22, r24
    2324:	cd 01       	movw	r24, r26
    2326:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	8b 83       	std	Y+3, r24	; 0x03
    2330:	9c 83       	std	Y+4, r25	; 0x04
    2332:	ad 83       	std	Y+5, r26	; 0x05
    2334:	be 83       	std	Y+6, r27	; 0x06
				num /= L_u8Counter;
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	9a 81       	ldd	r25, Y+2	; 0x02
    233a:	cc 01       	movw	r24, r24
    233c:	a0 e0       	ldi	r26, 0x00	; 0
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	bc 01       	movw	r22, r24
    2342:	cd 01       	movw	r24, r26
    2344:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    2348:	9b 01       	movw	r18, r22
    234a:	ac 01       	movw	r20, r24
    234c:	6f 81       	ldd	r22, Y+7	; 0x07
    234e:	78 85       	ldd	r23, Y+8	; 0x08
    2350:	89 85       	ldd	r24, Y+9	; 0x09
    2352:	9a 85       	ldd	r25, Y+10	; 0x0a
    2354:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	8f 83       	std	Y+7, r24	; 0x07
    235e:	98 87       	std	Y+8, r25	; 0x08
    2360:	a9 87       	std	Y+9, r26	; 0x09
    2362:	ba 87       	std	Y+10, r27	; 0x0a
				L_u8Counter /= 10;
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	9a 81       	ldd	r25, Y+2	; 0x02
    2368:	2a e0       	ldi	r18, 0x0A	; 10
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	b9 01       	movw	r22, r18
    236e:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__udivmodhi4>
    2372:	cb 01       	movw	r24, r22
    2374:	9a 83       	std	Y+2, r25	; 0x02
    2376:	89 83       	std	Y+1, r24	; 0x01
				LCD_PrintSigned32BitNum(num);
    2378:	6f 81       	ldd	r22, Y+7	; 0x07
    237a:	78 85       	ldd	r23, Y+8	; 0x08
    237c:	89 85       	ldd	r24, Y+9	; 0x09
    237e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2380:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	bc 01       	movw	r22, r24
    238a:	cd 01       	movw	r24, r26
    238c:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <LCD_PrintSigned32BitNum>
			/*find the value of the number "hundreds,thousands ... " */
			while (num >= 10) {
				num /= 10;
				L_u8Counter *= 10;
			}
			while (L_u8Counter >= 1) {
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	9a 81       	ldd	r25, Y+2	; 0x02
    2394:	00 97       	sbiw	r24, 0x00	; 0
    2396:	09 f0       	breq	.+2      	; 0x239a <LCD_PrintNumFloat+0x26a>
    2398:	a9 cf       	rjmp	.-174    	; 0x22ec <LCD_PrintNumFloat+0x1bc>
				LCD_PrintSigned32BitNum(num);
			}

		}
	}
}
    239a:	2a 96       	adiw	r28, 0x0a	; 10
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	cd bf       	out	0x3d, r28	; 61
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	1f 91       	pop	r17
    23ac:	0f 91       	pop	r16
    23ae:	ff 90       	pop	r15
    23b0:	ef 90       	pop	r14
    23b2:	08 95       	ret

000023b4 <GPIO_setupPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,GPIO_PinDirectionType direction) {
    23b4:	df 93       	push	r29
    23b6:	cf 93       	push	r28
    23b8:	00 d0       	rcall	.+0      	; 0x23ba <GPIO_setupPinDirection+0x6>
    23ba:	00 d0       	rcall	.+0      	; 0x23bc <GPIO_setupPinDirection+0x8>
    23bc:	0f 92       	push	r0
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
    23c2:	89 83       	std	Y+1, r24	; 0x01
    23c4:	6a 83       	std	Y+2, r22	; 0x02
    23c6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    23c8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ca:	88 30       	cpi	r24, 0x08	; 8
    23cc:	08 f0       	brcs	.+2      	; 0x23d0 <GPIO_setupPinDirection+0x1c>
    23ce:	d5 c0       	rjmp	.+426    	; 0x257a <GPIO_setupPinDirection+0x1c6>
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	84 30       	cpi	r24, 0x04	; 4
    23d4:	08 f0       	brcs	.+2      	; 0x23d8 <GPIO_setupPinDirection+0x24>
    23d6:	d1 c0       	rjmp	.+418    	; 0x257a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	} else {
		/* Setup the pin direction as required */
		switch (port_num) {
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	28 2f       	mov	r18, r24
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	3d 83       	std	Y+5, r19	; 0x05
    23e0:	2c 83       	std	Y+4, r18	; 0x04
    23e2:	8c 81       	ldd	r24, Y+4	; 0x04
    23e4:	9d 81       	ldd	r25, Y+5	; 0x05
    23e6:	81 30       	cpi	r24, 0x01	; 1
    23e8:	91 05       	cpc	r25, r1
    23ea:	09 f4       	brne	.+2      	; 0x23ee <GPIO_setupPinDirection+0x3a>
    23ec:	43 c0       	rjmp	.+134    	; 0x2474 <GPIO_setupPinDirection+0xc0>
    23ee:	2c 81       	ldd	r18, Y+4	; 0x04
    23f0:	3d 81       	ldd	r19, Y+5	; 0x05
    23f2:	22 30       	cpi	r18, 0x02	; 2
    23f4:	31 05       	cpc	r19, r1
    23f6:	2c f4       	brge	.+10     	; 0x2402 <GPIO_setupPinDirection+0x4e>
    23f8:	8c 81       	ldd	r24, Y+4	; 0x04
    23fa:	9d 81       	ldd	r25, Y+5	; 0x05
    23fc:	00 97       	sbiw	r24, 0x00	; 0
    23fe:	71 f0       	breq	.+28     	; 0x241c <GPIO_setupPinDirection+0x68>
    2400:	bc c0       	rjmp	.+376    	; 0x257a <GPIO_setupPinDirection+0x1c6>
    2402:	2c 81       	ldd	r18, Y+4	; 0x04
    2404:	3d 81       	ldd	r19, Y+5	; 0x05
    2406:	22 30       	cpi	r18, 0x02	; 2
    2408:	31 05       	cpc	r19, r1
    240a:	09 f4       	brne	.+2      	; 0x240e <GPIO_setupPinDirection+0x5a>
    240c:	5f c0       	rjmp	.+190    	; 0x24cc <GPIO_setupPinDirection+0x118>
    240e:	8c 81       	ldd	r24, Y+4	; 0x04
    2410:	9d 81       	ldd	r25, Y+5	; 0x05
    2412:	83 30       	cpi	r24, 0x03	; 3
    2414:	91 05       	cpc	r25, r1
    2416:	09 f4       	brne	.+2      	; 0x241a <GPIO_setupPinDirection+0x66>
    2418:	85 c0       	rjmp	.+266    	; 0x2524 <GPIO_setupPinDirection+0x170>
    241a:	af c0       	rjmp	.+350    	; 0x257a <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
    241c:	8b 81       	ldd	r24, Y+3	; 0x03
    241e:	81 30       	cpi	r24, 0x01	; 1
    2420:	a1 f4       	brne	.+40     	; 0x244a <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_num);
    2422:	aa e3       	ldi	r26, 0x3A	; 58
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	ea e3       	ldi	r30, 0x3A	; 58
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	48 2f       	mov	r20, r24
    242e:	8a 81       	ldd	r24, Y+2	; 0x02
    2430:	28 2f       	mov	r18, r24
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	02 2e       	mov	r0, r18
    243a:	02 c0       	rjmp	.+4      	; 0x2440 <GPIO_setupPinDirection+0x8c>
    243c:	88 0f       	add	r24, r24
    243e:	99 1f       	adc	r25, r25
    2440:	0a 94       	dec	r0
    2442:	e2 f7       	brpl	.-8      	; 0x243c <GPIO_setupPinDirection+0x88>
    2444:	84 2b       	or	r24, r20
    2446:	8c 93       	st	X, r24
    2448:	98 c0       	rjmp	.+304    	; 0x257a <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_num);
    244a:	aa e3       	ldi	r26, 0x3A	; 58
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	ea e3       	ldi	r30, 0x3A	; 58
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	48 2f       	mov	r20, r24
    2456:	8a 81       	ldd	r24, Y+2	; 0x02
    2458:	28 2f       	mov	r18, r24
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	02 2e       	mov	r0, r18
    2462:	02 c0       	rjmp	.+4      	; 0x2468 <GPIO_setupPinDirection+0xb4>
    2464:	88 0f       	add	r24, r24
    2466:	99 1f       	adc	r25, r25
    2468:	0a 94       	dec	r0
    246a:	e2 f7       	brpl	.-8      	; 0x2464 <GPIO_setupPinDirection+0xb0>
    246c:	80 95       	com	r24
    246e:	84 23       	and	r24, r20
    2470:	8c 93       	st	X, r24
    2472:	83 c0       	rjmp	.+262    	; 0x257a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
    2474:	8b 81       	ldd	r24, Y+3	; 0x03
    2476:	81 30       	cpi	r24, 0x01	; 1
    2478:	a1 f4       	brne	.+40     	; 0x24a2 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
    247a:	a7 e3       	ldi	r26, 0x37	; 55
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	e7 e3       	ldi	r30, 0x37	; 55
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	48 2f       	mov	r20, r24
    2486:	8a 81       	ldd	r24, Y+2	; 0x02
    2488:	28 2f       	mov	r18, r24
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	02 2e       	mov	r0, r18
    2492:	02 c0       	rjmp	.+4      	; 0x2498 <GPIO_setupPinDirection+0xe4>
    2494:	88 0f       	add	r24, r24
    2496:	99 1f       	adc	r25, r25
    2498:	0a 94       	dec	r0
    249a:	e2 f7       	brpl	.-8      	; 0x2494 <GPIO_setupPinDirection+0xe0>
    249c:	84 2b       	or	r24, r20
    249e:	8c 93       	st	X, r24
    24a0:	6c c0       	rjmp	.+216    	; 0x257a <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_num);
    24a2:	a7 e3       	ldi	r26, 0x37	; 55
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	e7 e3       	ldi	r30, 0x37	; 55
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	48 2f       	mov	r20, r24
    24ae:	8a 81       	ldd	r24, Y+2	; 0x02
    24b0:	28 2f       	mov	r18, r24
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	02 2e       	mov	r0, r18
    24ba:	02 c0       	rjmp	.+4      	; 0x24c0 <GPIO_setupPinDirection+0x10c>
    24bc:	88 0f       	add	r24, r24
    24be:	99 1f       	adc	r25, r25
    24c0:	0a 94       	dec	r0
    24c2:	e2 f7       	brpl	.-8      	; 0x24bc <GPIO_setupPinDirection+0x108>
    24c4:	80 95       	com	r24
    24c6:	84 23       	and	r24, r20
    24c8:	8c 93       	st	X, r24
    24ca:	57 c0       	rjmp	.+174    	; 0x257a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	81 30       	cpi	r24, 0x01	; 1
    24d0:	a1 f4       	brne	.+40     	; 0x24fa <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
    24d2:	a4 e3       	ldi	r26, 0x34	; 52
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	e4 e3       	ldi	r30, 0x34	; 52
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	80 81       	ld	r24, Z
    24dc:	48 2f       	mov	r20, r24
    24de:	8a 81       	ldd	r24, Y+2	; 0x02
    24e0:	28 2f       	mov	r18, r24
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	02 2e       	mov	r0, r18
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <GPIO_setupPinDirection+0x13c>
    24ec:	88 0f       	add	r24, r24
    24ee:	99 1f       	adc	r25, r25
    24f0:	0a 94       	dec	r0
    24f2:	e2 f7       	brpl	.-8      	; 0x24ec <GPIO_setupPinDirection+0x138>
    24f4:	84 2b       	or	r24, r20
    24f6:	8c 93       	st	X, r24
    24f8:	40 c0       	rjmp	.+128    	; 0x257a <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_num);
    24fa:	a4 e3       	ldi	r26, 0x34	; 52
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	e4 e3       	ldi	r30, 0x34	; 52
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	48 2f       	mov	r20, r24
    2506:	8a 81       	ldd	r24, Y+2	; 0x02
    2508:	28 2f       	mov	r18, r24
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	02 2e       	mov	r0, r18
    2512:	02 c0       	rjmp	.+4      	; 0x2518 <GPIO_setupPinDirection+0x164>
    2514:	88 0f       	add	r24, r24
    2516:	99 1f       	adc	r25, r25
    2518:	0a 94       	dec	r0
    251a:	e2 f7       	brpl	.-8      	; 0x2514 <GPIO_setupPinDirection+0x160>
    251c:	80 95       	com	r24
    251e:	84 23       	and	r24, r20
    2520:	8c 93       	st	X, r24
    2522:	2b c0       	rjmp	.+86     	; 0x257a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
    2524:	8b 81       	ldd	r24, Y+3	; 0x03
    2526:	81 30       	cpi	r24, 0x01	; 1
    2528:	a1 f4       	brne	.+40     	; 0x2552 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
    252a:	a1 e3       	ldi	r26, 0x31	; 49
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	e1 e3       	ldi	r30, 0x31	; 49
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	48 2f       	mov	r20, r24
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	28 2f       	mov	r18, r24
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	02 2e       	mov	r0, r18
    2542:	02 c0       	rjmp	.+4      	; 0x2548 <GPIO_setupPinDirection+0x194>
    2544:	88 0f       	add	r24, r24
    2546:	99 1f       	adc	r25, r25
    2548:	0a 94       	dec	r0
    254a:	e2 f7       	brpl	.-8      	; 0x2544 <GPIO_setupPinDirection+0x190>
    254c:	84 2b       	or	r24, r20
    254e:	8c 93       	st	X, r24
    2550:	14 c0       	rjmp	.+40     	; 0x257a <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_num);
    2552:	a1 e3       	ldi	r26, 0x31	; 49
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	e1 e3       	ldi	r30, 0x31	; 49
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	48 2f       	mov	r20, r24
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	02 2e       	mov	r0, r18
    256a:	02 c0       	rjmp	.+4      	; 0x2570 <GPIO_setupPinDirection+0x1bc>
    256c:	88 0f       	add	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	0a 94       	dec	r0
    2572:	e2 f7       	brpl	.-8      	; 0x256c <GPIO_setupPinDirection+0x1b8>
    2574:	80 95       	com	r24
    2576:	84 23       	and	r24, r20
    2578:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    257a:	0f 90       	pop	r0
    257c:	0f 90       	pop	r0
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
    2582:	0f 90       	pop	r0
    2584:	cf 91       	pop	r28
    2586:	df 91       	pop	r29
    2588:	08 95       	ret

0000258a <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    258a:	df 93       	push	r29
    258c:	cf 93       	push	r28
    258e:	00 d0       	rcall	.+0      	; 0x2590 <GPIO_writePin+0x6>
    2590:	00 d0       	rcall	.+0      	; 0x2592 <GPIO_writePin+0x8>
    2592:	0f 92       	push	r0
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
    2598:	89 83       	std	Y+1, r24	; 0x01
    259a:	6a 83       	std	Y+2, r22	; 0x02
    259c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    259e:	8a 81       	ldd	r24, Y+2	; 0x02
    25a0:	88 30       	cpi	r24, 0x08	; 8
    25a2:	08 f0       	brcs	.+2      	; 0x25a6 <GPIO_writePin+0x1c>
    25a4:	d5 c0       	rjmp	.+426    	; 0x2750 <GPIO_writePin+0x1c6>
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	84 30       	cpi	r24, 0x04	; 4
    25aa:	08 f0       	brcs	.+2      	; 0x25ae <GPIO_writePin+0x24>
    25ac:	d1 c0       	rjmp	.+418    	; 0x2750 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	} else {
		/* write the pin value as required */
		switch (port_num) {
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	3d 83       	std	Y+5, r19	; 0x05
    25b6:	2c 83       	std	Y+4, r18	; 0x04
    25b8:	8c 81       	ldd	r24, Y+4	; 0x04
    25ba:	9d 81       	ldd	r25, Y+5	; 0x05
    25bc:	81 30       	cpi	r24, 0x01	; 1
    25be:	91 05       	cpc	r25, r1
    25c0:	09 f4       	brne	.+2      	; 0x25c4 <GPIO_writePin+0x3a>
    25c2:	43 c0       	rjmp	.+134    	; 0x264a <GPIO_writePin+0xc0>
    25c4:	2c 81       	ldd	r18, Y+4	; 0x04
    25c6:	3d 81       	ldd	r19, Y+5	; 0x05
    25c8:	22 30       	cpi	r18, 0x02	; 2
    25ca:	31 05       	cpc	r19, r1
    25cc:	2c f4       	brge	.+10     	; 0x25d8 <GPIO_writePin+0x4e>
    25ce:	8c 81       	ldd	r24, Y+4	; 0x04
    25d0:	9d 81       	ldd	r25, Y+5	; 0x05
    25d2:	00 97       	sbiw	r24, 0x00	; 0
    25d4:	71 f0       	breq	.+28     	; 0x25f2 <GPIO_writePin+0x68>
    25d6:	bc c0       	rjmp	.+376    	; 0x2750 <GPIO_writePin+0x1c6>
    25d8:	2c 81       	ldd	r18, Y+4	; 0x04
    25da:	3d 81       	ldd	r19, Y+5	; 0x05
    25dc:	22 30       	cpi	r18, 0x02	; 2
    25de:	31 05       	cpc	r19, r1
    25e0:	09 f4       	brne	.+2      	; 0x25e4 <GPIO_writePin+0x5a>
    25e2:	5f c0       	rjmp	.+190    	; 0x26a2 <GPIO_writePin+0x118>
    25e4:	8c 81       	ldd	r24, Y+4	; 0x04
    25e6:	9d 81       	ldd	r25, Y+5	; 0x05
    25e8:	83 30       	cpi	r24, 0x03	; 3
    25ea:	91 05       	cpc	r25, r1
    25ec:	09 f4       	brne	.+2      	; 0x25f0 <GPIO_writePin+0x66>
    25ee:	85 c0       	rjmp	.+266    	; 0x26fa <GPIO_writePin+0x170>
    25f0:	af c0       	rjmp	.+350    	; 0x2750 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (value == LOGIC_HIGH) {
    25f2:	8b 81       	ldd	r24, Y+3	; 0x03
    25f4:	81 30       	cpi	r24, 0x01	; 1
    25f6:	a1 f4       	brne	.+40     	; 0x2620 <GPIO_writePin+0x96>
				SET_BIT(PORTA, pin_num);
    25f8:	ab e3       	ldi	r26, 0x3B	; 59
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	eb e3       	ldi	r30, 0x3B	; 59
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	48 2f       	mov	r20, r24
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	28 2f       	mov	r18, r24
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	02 2e       	mov	r0, r18
    2610:	02 c0       	rjmp	.+4      	; 0x2616 <GPIO_writePin+0x8c>
    2612:	88 0f       	add	r24, r24
    2614:	99 1f       	adc	r25, r25
    2616:	0a 94       	dec	r0
    2618:	e2 f7       	brpl	.-8      	; 0x2612 <GPIO_writePin+0x88>
    261a:	84 2b       	or	r24, r20
    261c:	8c 93       	st	X, r24
    261e:	98 c0       	rjmp	.+304    	; 0x2750 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTA, pin_num);
    2620:	ab e3       	ldi	r26, 0x3B	; 59
    2622:	b0 e0       	ldi	r27, 0x00	; 0
    2624:	eb e3       	ldi	r30, 0x3B	; 59
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	48 2f       	mov	r20, r24
    262c:	8a 81       	ldd	r24, Y+2	; 0x02
    262e:	28 2f       	mov	r18, r24
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	02 2e       	mov	r0, r18
    2638:	02 c0       	rjmp	.+4      	; 0x263e <GPIO_writePin+0xb4>
    263a:	88 0f       	add	r24, r24
    263c:	99 1f       	adc	r25, r25
    263e:	0a 94       	dec	r0
    2640:	e2 f7       	brpl	.-8      	; 0x263a <GPIO_writePin+0xb0>
    2642:	80 95       	com	r24
    2644:	84 23       	and	r24, r20
    2646:	8c 93       	st	X, r24
    2648:	83 c0       	rjmp	.+262    	; 0x2750 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH) {
    264a:	8b 81       	ldd	r24, Y+3	; 0x03
    264c:	81 30       	cpi	r24, 0x01	; 1
    264e:	a1 f4       	brne	.+40     	; 0x2678 <GPIO_writePin+0xee>
				SET_BIT(PORTB, pin_num);
    2650:	a8 e3       	ldi	r26, 0x38	; 56
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	e8 e3       	ldi	r30, 0x38	; 56
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
    265a:	48 2f       	mov	r20, r24
    265c:	8a 81       	ldd	r24, Y+2	; 0x02
    265e:	28 2f       	mov	r18, r24
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	02 2e       	mov	r0, r18
    2668:	02 c0       	rjmp	.+4      	; 0x266e <GPIO_writePin+0xe4>
    266a:	88 0f       	add	r24, r24
    266c:	99 1f       	adc	r25, r25
    266e:	0a 94       	dec	r0
    2670:	e2 f7       	brpl	.-8      	; 0x266a <GPIO_writePin+0xe0>
    2672:	84 2b       	or	r24, r20
    2674:	8c 93       	st	X, r24
    2676:	6c c0       	rjmp	.+216    	; 0x2750 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTB, pin_num);
    2678:	a8 e3       	ldi	r26, 0x38	; 56
    267a:	b0 e0       	ldi	r27, 0x00	; 0
    267c:	e8 e3       	ldi	r30, 0x38	; 56
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	80 81       	ld	r24, Z
    2682:	48 2f       	mov	r20, r24
    2684:	8a 81       	ldd	r24, Y+2	; 0x02
    2686:	28 2f       	mov	r18, r24
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	02 2e       	mov	r0, r18
    2690:	02 c0       	rjmp	.+4      	; 0x2696 <GPIO_writePin+0x10c>
    2692:	88 0f       	add	r24, r24
    2694:	99 1f       	adc	r25, r25
    2696:	0a 94       	dec	r0
    2698:	e2 f7       	brpl	.-8      	; 0x2692 <GPIO_writePin+0x108>
    269a:	80 95       	com	r24
    269c:	84 23       	and	r24, r20
    269e:	8c 93       	st	X, r24
    26a0:	57 c0       	rjmp	.+174    	; 0x2750 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH) {
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	81 30       	cpi	r24, 0x01	; 1
    26a6:	a1 f4       	brne	.+40     	; 0x26d0 <GPIO_writePin+0x146>
				SET_BIT(PORTC, pin_num);
    26a8:	a5 e3       	ldi	r26, 0x35	; 53
    26aa:	b0 e0       	ldi	r27, 0x00	; 0
    26ac:	e5 e3       	ldi	r30, 0x35	; 53
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	48 2f       	mov	r20, r24
    26b4:	8a 81       	ldd	r24, Y+2	; 0x02
    26b6:	28 2f       	mov	r18, r24
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	02 2e       	mov	r0, r18
    26c0:	02 c0       	rjmp	.+4      	; 0x26c6 <GPIO_writePin+0x13c>
    26c2:	88 0f       	add	r24, r24
    26c4:	99 1f       	adc	r25, r25
    26c6:	0a 94       	dec	r0
    26c8:	e2 f7       	brpl	.-8      	; 0x26c2 <GPIO_writePin+0x138>
    26ca:	84 2b       	or	r24, r20
    26cc:	8c 93       	st	X, r24
    26ce:	40 c0       	rjmp	.+128    	; 0x2750 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTC, pin_num);
    26d0:	a5 e3       	ldi	r26, 0x35	; 53
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	e5 e3       	ldi	r30, 0x35	; 53
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	80 81       	ld	r24, Z
    26da:	48 2f       	mov	r20, r24
    26dc:	8a 81       	ldd	r24, Y+2	; 0x02
    26de:	28 2f       	mov	r18, r24
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	02 2e       	mov	r0, r18
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <GPIO_writePin+0x164>
    26ea:	88 0f       	add	r24, r24
    26ec:	99 1f       	adc	r25, r25
    26ee:	0a 94       	dec	r0
    26f0:	e2 f7       	brpl	.-8      	; 0x26ea <GPIO_writePin+0x160>
    26f2:	80 95       	com	r24
    26f4:	84 23       	and	r24, r20
    26f6:	8c 93       	st	X, r24
    26f8:	2b c0       	rjmp	.+86     	; 0x2750 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH) {
    26fa:	8b 81       	ldd	r24, Y+3	; 0x03
    26fc:	81 30       	cpi	r24, 0x01	; 1
    26fe:	a1 f4       	brne	.+40     	; 0x2728 <GPIO_writePin+0x19e>
				SET_BIT(PORTD, pin_num);
    2700:	a2 e3       	ldi	r26, 0x32	; 50
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	e2 e3       	ldi	r30, 0x32	; 50
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	48 2f       	mov	r20, r24
    270c:	8a 81       	ldd	r24, Y+2	; 0x02
    270e:	28 2f       	mov	r18, r24
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	02 2e       	mov	r0, r18
    2718:	02 c0       	rjmp	.+4      	; 0x271e <GPIO_writePin+0x194>
    271a:	88 0f       	add	r24, r24
    271c:	99 1f       	adc	r25, r25
    271e:	0a 94       	dec	r0
    2720:	e2 f7       	brpl	.-8      	; 0x271a <GPIO_writePin+0x190>
    2722:	84 2b       	or	r24, r20
    2724:	8c 93       	st	X, r24
    2726:	14 c0       	rjmp	.+40     	; 0x2750 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTD, pin_num);
    2728:	a2 e3       	ldi	r26, 0x32	; 50
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	e2 e3       	ldi	r30, 0x32	; 50
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	48 2f       	mov	r20, r24
    2734:	8a 81       	ldd	r24, Y+2	; 0x02
    2736:	28 2f       	mov	r18, r24
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	02 2e       	mov	r0, r18
    2740:	02 c0       	rjmp	.+4      	; 0x2746 <GPIO_writePin+0x1bc>
    2742:	88 0f       	add	r24, r24
    2744:	99 1f       	adc	r25, r25
    2746:	0a 94       	dec	r0
    2748:	e2 f7       	brpl	.-8      	; 0x2742 <GPIO_writePin+0x1b8>
    274a:	80 95       	com	r24
    274c:	84 23       	and	r24, r20
    274e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2750:	0f 90       	pop	r0
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	0f 90       	pop	r0
    2758:	0f 90       	pop	r0
    275a:	cf 91       	pop	r28
    275c:	df 91       	pop	r29
    275e:	08 95       	ret

00002760 <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    2760:	df 93       	push	r29
    2762:	cf 93       	push	r28
    2764:	00 d0       	rcall	.+0      	; 0x2766 <GPIO_readPin+0x6>
    2766:	00 d0       	rcall	.+0      	; 0x2768 <GPIO_readPin+0x8>
    2768:	0f 92       	push	r0
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
    276e:	8a 83       	std	Y+2, r24	; 0x02
    2770:	6b 83       	std	Y+3, r22	; 0x03

	uint8 value = LOGIC_LOW;
    2772:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    2774:	8b 81       	ldd	r24, Y+3	; 0x03
    2776:	88 30       	cpi	r24, 0x08	; 8
    2778:	08 f0       	brcs	.+2      	; 0x277c <GPIO_readPin+0x1c>
    277a:	84 c0       	rjmp	.+264    	; 0x2884 <GPIO_readPin+0x124>
    277c:	8a 81       	ldd	r24, Y+2	; 0x02
    277e:	84 30       	cpi	r24, 0x04	; 4
    2780:	08 f0       	brcs	.+2      	; 0x2784 <GPIO_readPin+0x24>
    2782:	80 c0       	rjmp	.+256    	; 0x2884 <GPIO_readPin+0x124>
		/* Do Nothing */
	} else {
		/* read the pin value */
		switch (port_num) {
    2784:	8a 81       	ldd	r24, Y+2	; 0x02
    2786:	28 2f       	mov	r18, r24
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	3d 83       	std	Y+5, r19	; 0x05
    278c:	2c 83       	std	Y+4, r18	; 0x04
    278e:	4c 81       	ldd	r20, Y+4	; 0x04
    2790:	5d 81       	ldd	r21, Y+5	; 0x05
    2792:	41 30       	cpi	r20, 0x01	; 1
    2794:	51 05       	cpc	r21, r1
    2796:	79 f1       	breq	.+94     	; 0x27f6 <GPIO_readPin+0x96>
    2798:	8c 81       	ldd	r24, Y+4	; 0x04
    279a:	9d 81       	ldd	r25, Y+5	; 0x05
    279c:	82 30       	cpi	r24, 0x02	; 2
    279e:	91 05       	cpc	r25, r1
    27a0:	34 f4       	brge	.+12     	; 0x27ae <GPIO_readPin+0x4e>
    27a2:	2c 81       	ldd	r18, Y+4	; 0x04
    27a4:	3d 81       	ldd	r19, Y+5	; 0x05
    27a6:	21 15       	cp	r18, r1
    27a8:	31 05       	cpc	r19, r1
    27aa:	69 f0       	breq	.+26     	; 0x27c6 <GPIO_readPin+0x66>
    27ac:	6b c0       	rjmp	.+214    	; 0x2884 <GPIO_readPin+0x124>
    27ae:	4c 81       	ldd	r20, Y+4	; 0x04
    27b0:	5d 81       	ldd	r21, Y+5	; 0x05
    27b2:	42 30       	cpi	r20, 0x02	; 2
    27b4:	51 05       	cpc	r21, r1
    27b6:	b9 f1       	breq	.+110    	; 0x2826 <GPIO_readPin+0xc6>
    27b8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ba:	9d 81       	ldd	r25, Y+5	; 0x05
    27bc:	83 30       	cpi	r24, 0x03	; 3
    27be:	91 05       	cpc	r25, r1
    27c0:	09 f4       	brne	.+2      	; 0x27c4 <GPIO_readPin+0x64>
    27c2:	49 c0       	rjmp	.+146    	; 0x2856 <GPIO_readPin+0xf6>
    27c4:	5f c0       	rjmp	.+190    	; 0x2884 <GPIO_readPin+0x124>
		case PORTA_ID:
			if (BIT_IS_SET(PINA, pin_num)) {
    27c6:	e9 e3       	ldi	r30, 0x39	; 57
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	28 2f       	mov	r18, r24
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	8b 81       	ldd	r24, Y+3	; 0x03
    27d2:	88 2f       	mov	r24, r24
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	a9 01       	movw	r20, r18
    27d8:	02 c0       	rjmp	.+4      	; 0x27de <GPIO_readPin+0x7e>
    27da:	55 95       	asr	r21
    27dc:	47 95       	ror	r20
    27de:	8a 95       	dec	r24
    27e0:	e2 f7       	brpl	.-8      	; 0x27da <GPIO_readPin+0x7a>
    27e2:	ca 01       	movw	r24, r20
    27e4:	81 70       	andi	r24, 0x01	; 1
    27e6:	90 70       	andi	r25, 0x00	; 0
    27e8:	88 23       	and	r24, r24
    27ea:	19 f0       	breq	.+6      	; 0x27f2 <GPIO_readPin+0x92>
				value = LOGIC_HIGH;
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	89 83       	std	Y+1, r24	; 0x01
    27f0:	49 c0       	rjmp	.+146    	; 0x2884 <GPIO_readPin+0x124>
			} else {
				value = LOGIC_LOW;
    27f2:	19 82       	std	Y+1, r1	; 0x01
    27f4:	47 c0       	rjmp	.+142    	; 0x2884 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB, pin_num)) {
    27f6:	e6 e3       	ldi	r30, 0x36	; 54
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	80 81       	ld	r24, Z
    27fc:	28 2f       	mov	r18, r24
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	8b 81       	ldd	r24, Y+3	; 0x03
    2802:	88 2f       	mov	r24, r24
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	a9 01       	movw	r20, r18
    2808:	02 c0       	rjmp	.+4      	; 0x280e <GPIO_readPin+0xae>
    280a:	55 95       	asr	r21
    280c:	47 95       	ror	r20
    280e:	8a 95       	dec	r24
    2810:	e2 f7       	brpl	.-8      	; 0x280a <GPIO_readPin+0xaa>
    2812:	ca 01       	movw	r24, r20
    2814:	81 70       	andi	r24, 0x01	; 1
    2816:	90 70       	andi	r25, 0x00	; 0
    2818:	88 23       	and	r24, r24
    281a:	19 f0       	breq	.+6      	; 0x2822 <GPIO_readPin+0xc2>
				value = LOGIC_HIGH;
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	89 83       	std	Y+1, r24	; 0x01
    2820:	31 c0       	rjmp	.+98     	; 0x2884 <GPIO_readPin+0x124>
			} else {
				value = LOGIC_LOW;
    2822:	19 82       	std	Y+1, r1	; 0x01
    2824:	2f c0       	rjmp	.+94     	; 0x2884 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC, pin_num)) {
    2826:	e3 e3       	ldi	r30, 0x33	; 51
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	28 2f       	mov	r18, r24
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	88 2f       	mov	r24, r24
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	a9 01       	movw	r20, r18
    2838:	02 c0       	rjmp	.+4      	; 0x283e <GPIO_readPin+0xde>
    283a:	55 95       	asr	r21
    283c:	47 95       	ror	r20
    283e:	8a 95       	dec	r24
    2840:	e2 f7       	brpl	.-8      	; 0x283a <GPIO_readPin+0xda>
    2842:	ca 01       	movw	r24, r20
    2844:	81 70       	andi	r24, 0x01	; 1
    2846:	90 70       	andi	r25, 0x00	; 0
    2848:	88 23       	and	r24, r24
    284a:	19 f0       	breq	.+6      	; 0x2852 <GPIO_readPin+0xf2>
				value = LOGIC_HIGH;
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	89 83       	std	Y+1, r24	; 0x01
    2850:	19 c0       	rjmp	.+50     	; 0x2884 <GPIO_readPin+0x124>
			} else {
				value = LOGIC_LOW;
    2852:	19 82       	std	Y+1, r1	; 0x01
    2854:	17 c0       	rjmp	.+46     	; 0x2884 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND, pin_num)) {
    2856:	e0 e3       	ldi	r30, 0x30	; 48
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	80 81       	ld	r24, Z
    285c:	28 2f       	mov	r18, r24
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	8b 81       	ldd	r24, Y+3	; 0x03
    2862:	88 2f       	mov	r24, r24
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	a9 01       	movw	r20, r18
    2868:	02 c0       	rjmp	.+4      	; 0x286e <GPIO_readPin+0x10e>
    286a:	55 95       	asr	r21
    286c:	47 95       	ror	r20
    286e:	8a 95       	dec	r24
    2870:	e2 f7       	brpl	.-8      	; 0x286a <GPIO_readPin+0x10a>
    2872:	ca 01       	movw	r24, r20
    2874:	81 70       	andi	r24, 0x01	; 1
    2876:	90 70       	andi	r25, 0x00	; 0
    2878:	88 23       	and	r24, r24
    287a:	19 f0       	breq	.+6      	; 0x2882 <GPIO_readPin+0x122>
				value = LOGIC_HIGH;
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	89 83       	std	Y+1, r24	; 0x01
    2880:	01 c0       	rjmp	.+2      	; 0x2884 <GPIO_readPin+0x124>
			} else {
				value = LOGIC_LOW;
    2882:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return value;
    2884:	89 81       	ldd	r24, Y+1	; 0x01
}
    2886:	0f 90       	pop	r0
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	0f 90       	pop	r0
    2890:	cf 91       	pop	r28
    2892:	df 91       	pop	r29
    2894:	08 95       	ret

00002896 <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    2896:	df 93       	push	r29
    2898:	cf 93       	push	r28
    289a:	00 d0       	rcall	.+0      	; 0x289c <GPIO_setupPortDirection+0x6>
    289c:	00 d0       	rcall	.+0      	; 0x289e <GPIO_setupPortDirection+0x8>
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
    28a2:	89 83       	std	Y+1, r24	; 0x01
    28a4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    28a6:	89 81       	ldd	r24, Y+1	; 0x01
    28a8:	84 30       	cpi	r24, 0x04	; 4
    28aa:	90 f5       	brcc	.+100    	; 0x2910 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	} else {
		/* Setup the port direction as required */
		switch (port_num) {
    28ac:	89 81       	ldd	r24, Y+1	; 0x01
    28ae:	28 2f       	mov	r18, r24
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	3c 83       	std	Y+4, r19	; 0x04
    28b4:	2b 83       	std	Y+3, r18	; 0x03
    28b6:	8b 81       	ldd	r24, Y+3	; 0x03
    28b8:	9c 81       	ldd	r25, Y+4	; 0x04
    28ba:	81 30       	cpi	r24, 0x01	; 1
    28bc:	91 05       	cpc	r25, r1
    28be:	d1 f0       	breq	.+52     	; 0x28f4 <GPIO_setupPortDirection+0x5e>
    28c0:	2b 81       	ldd	r18, Y+3	; 0x03
    28c2:	3c 81       	ldd	r19, Y+4	; 0x04
    28c4:	22 30       	cpi	r18, 0x02	; 2
    28c6:	31 05       	cpc	r19, r1
    28c8:	2c f4       	brge	.+10     	; 0x28d4 <GPIO_setupPortDirection+0x3e>
    28ca:	8b 81       	ldd	r24, Y+3	; 0x03
    28cc:	9c 81       	ldd	r25, Y+4	; 0x04
    28ce:	00 97       	sbiw	r24, 0x00	; 0
    28d0:	61 f0       	breq	.+24     	; 0x28ea <GPIO_setupPortDirection+0x54>
    28d2:	1e c0       	rjmp	.+60     	; 0x2910 <GPIO_setupPortDirection+0x7a>
    28d4:	2b 81       	ldd	r18, Y+3	; 0x03
    28d6:	3c 81       	ldd	r19, Y+4	; 0x04
    28d8:	22 30       	cpi	r18, 0x02	; 2
    28da:	31 05       	cpc	r19, r1
    28dc:	81 f0       	breq	.+32     	; 0x28fe <GPIO_setupPortDirection+0x68>
    28de:	8b 81       	ldd	r24, Y+3	; 0x03
    28e0:	9c 81       	ldd	r25, Y+4	; 0x04
    28e2:	83 30       	cpi	r24, 0x03	; 3
    28e4:	91 05       	cpc	r25, r1
    28e6:	81 f0       	breq	.+32     	; 0x2908 <GPIO_setupPortDirection+0x72>
    28e8:	13 c0       	rjmp	.+38     	; 0x2910 <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    28ea:	ea e3       	ldi	r30, 0x3A	; 58
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	8a 81       	ldd	r24, Y+2	; 0x02
    28f0:	80 83       	st	Z, r24
    28f2:	0e c0       	rjmp	.+28     	; 0x2910 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    28f4:	e7 e3       	ldi	r30, 0x37	; 55
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	8a 81       	ldd	r24, Y+2	; 0x02
    28fa:	80 83       	st	Z, r24
    28fc:	09 c0       	rjmp	.+18     	; 0x2910 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    28fe:	e4 e3       	ldi	r30, 0x34	; 52
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	8a 81       	ldd	r24, Y+2	; 0x02
    2904:	80 83       	st	Z, r24
    2906:	04 c0       	rjmp	.+8      	; 0x2910 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2908:	e1 e3       	ldi	r30, 0x31	; 49
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	8a 81       	ldd	r24, Y+2	; 0x02
    290e:	80 83       	st	Z, r24
			break;
		}
	}
}
    2910:	0f 90       	pop	r0
    2912:	0f 90       	pop	r0
    2914:	0f 90       	pop	r0
    2916:	0f 90       	pop	r0
    2918:	cf 91       	pop	r28
    291a:	df 91       	pop	r29
    291c:	08 95       	ret

0000291e <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    291e:	df 93       	push	r29
    2920:	cf 93       	push	r28
    2922:	00 d0       	rcall	.+0      	; 0x2924 <GPIO_writePort+0x6>
    2924:	00 d0       	rcall	.+0      	; 0x2926 <GPIO_writePort+0x8>
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
    292a:	89 83       	std	Y+1, r24	; 0x01
    292c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    292e:	89 81       	ldd	r24, Y+1	; 0x01
    2930:	84 30       	cpi	r24, 0x04	; 4
    2932:	90 f5       	brcc	.+100    	; 0x2998 <GPIO_writePort+0x7a>
		/* Do Nothing */
	} else {
		/* write the port direction as required */
		switch (port_num) {
    2934:	89 81       	ldd	r24, Y+1	; 0x01
    2936:	28 2f       	mov	r18, r24
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	3c 83       	std	Y+4, r19	; 0x04
    293c:	2b 83       	std	Y+3, r18	; 0x03
    293e:	8b 81       	ldd	r24, Y+3	; 0x03
    2940:	9c 81       	ldd	r25, Y+4	; 0x04
    2942:	81 30       	cpi	r24, 0x01	; 1
    2944:	91 05       	cpc	r25, r1
    2946:	d1 f0       	breq	.+52     	; 0x297c <GPIO_writePort+0x5e>
    2948:	2b 81       	ldd	r18, Y+3	; 0x03
    294a:	3c 81       	ldd	r19, Y+4	; 0x04
    294c:	22 30       	cpi	r18, 0x02	; 2
    294e:	31 05       	cpc	r19, r1
    2950:	2c f4       	brge	.+10     	; 0x295c <GPIO_writePort+0x3e>
    2952:	8b 81       	ldd	r24, Y+3	; 0x03
    2954:	9c 81       	ldd	r25, Y+4	; 0x04
    2956:	00 97       	sbiw	r24, 0x00	; 0
    2958:	61 f0       	breq	.+24     	; 0x2972 <GPIO_writePort+0x54>
    295a:	1e c0       	rjmp	.+60     	; 0x2998 <GPIO_writePort+0x7a>
    295c:	2b 81       	ldd	r18, Y+3	; 0x03
    295e:	3c 81       	ldd	r19, Y+4	; 0x04
    2960:	22 30       	cpi	r18, 0x02	; 2
    2962:	31 05       	cpc	r19, r1
    2964:	81 f0       	breq	.+32     	; 0x2986 <GPIO_writePort+0x68>
    2966:	8b 81       	ldd	r24, Y+3	; 0x03
    2968:	9c 81       	ldd	r25, Y+4	; 0x04
    296a:	83 30       	cpi	r24, 0x03	; 3
    296c:	91 05       	cpc	r25, r1
    296e:	81 f0       	breq	.+32     	; 0x2990 <GPIO_writePort+0x72>
    2970:	13 c0       	rjmp	.+38     	; 0x2998 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    2972:	eb e3       	ldi	r30, 0x3B	; 59
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	8a 81       	ldd	r24, Y+2	; 0x02
    2978:	80 83       	st	Z, r24
    297a:	0e c0       	rjmp	.+28     	; 0x2998 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    297c:	e8 e3       	ldi	r30, 0x38	; 56
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	8a 81       	ldd	r24, Y+2	; 0x02
    2982:	80 83       	st	Z, r24
    2984:	09 c0       	rjmp	.+18     	; 0x2998 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2986:	e5 e3       	ldi	r30, 0x35	; 53
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	8a 81       	ldd	r24, Y+2	; 0x02
    298c:	80 83       	st	Z, r24
    298e:	04 c0       	rjmp	.+8      	; 0x2998 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2990:	e2 e3       	ldi	r30, 0x32	; 50
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	8a 81       	ldd	r24, Y+2	; 0x02
    2996:	80 83       	st	Z, r24
			break;
		}
	}

}
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	cf 91       	pop	r28
    29a2:	df 91       	pop	r29
    29a4:	08 95       	ret

000029a6 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    29a6:	df 93       	push	r29
    29a8:	cf 93       	push	r28
    29aa:	00 d0       	rcall	.+0      	; 0x29ac <GPIO_readPort+0x6>
    29ac:	00 d0       	rcall	.+0      	; 0x29ae <GPIO_readPort+0x8>
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
    29b2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = 0;
    29b4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    29b6:	8a 81       	ldd	r24, Y+2	; 0x02
    29b8:	84 30       	cpi	r24, 0x04	; 4
    29ba:	90 f5       	brcc	.+100    	; 0x2a20 <GPIO_readPort+0x7a>
		/* Do Nothing */
	} else {
		/* read the port value as required */
		switch (port_num) {
    29bc:	8a 81       	ldd	r24, Y+2	; 0x02
    29be:	28 2f       	mov	r18, r24
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	3c 83       	std	Y+4, r19	; 0x04
    29c4:	2b 83       	std	Y+3, r18	; 0x03
    29c6:	8b 81       	ldd	r24, Y+3	; 0x03
    29c8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ca:	81 30       	cpi	r24, 0x01	; 1
    29cc:	91 05       	cpc	r25, r1
    29ce:	d1 f0       	breq	.+52     	; 0x2a04 <GPIO_readPort+0x5e>
    29d0:	2b 81       	ldd	r18, Y+3	; 0x03
    29d2:	3c 81       	ldd	r19, Y+4	; 0x04
    29d4:	22 30       	cpi	r18, 0x02	; 2
    29d6:	31 05       	cpc	r19, r1
    29d8:	2c f4       	brge	.+10     	; 0x29e4 <GPIO_readPort+0x3e>
    29da:	8b 81       	ldd	r24, Y+3	; 0x03
    29dc:	9c 81       	ldd	r25, Y+4	; 0x04
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	61 f0       	breq	.+24     	; 0x29fa <GPIO_readPort+0x54>
    29e2:	1e c0       	rjmp	.+60     	; 0x2a20 <GPIO_readPort+0x7a>
    29e4:	2b 81       	ldd	r18, Y+3	; 0x03
    29e6:	3c 81       	ldd	r19, Y+4	; 0x04
    29e8:	22 30       	cpi	r18, 0x02	; 2
    29ea:	31 05       	cpc	r19, r1
    29ec:	81 f0       	breq	.+32     	; 0x2a0e <GPIO_readPort+0x68>
    29ee:	8b 81       	ldd	r24, Y+3	; 0x03
    29f0:	9c 81       	ldd	r25, Y+4	; 0x04
    29f2:	83 30       	cpi	r24, 0x03	; 3
    29f4:	91 05       	cpc	r25, r1
    29f6:	81 f0       	breq	.+32     	; 0x2a18 <GPIO_readPort+0x72>
    29f8:	13 c0       	rjmp	.+38     	; 0x2a20 <GPIO_readPort+0x7a>
		case PORTA_ID:
			value = PINA;
    29fa:	e9 e3       	ldi	r30, 0x39	; 57
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	89 83       	std	Y+1, r24	; 0x01
    2a02:	0e c0       	rjmp	.+28     	; 0x2a20 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2a04:	e6 e3       	ldi	r30, 0x36	; 54
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	80 81       	ld	r24, Z
    2a0a:	89 83       	std	Y+1, r24	; 0x01
    2a0c:	09 c0       	rjmp	.+18     	; 0x2a20 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2a0e:	e3 e3       	ldi	r30, 0x33	; 51
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	89 83       	std	Y+1, r24	; 0x01
    2a16:	04 c0       	rjmp	.+8      	; 0x2a20 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2a18:	e0 e3       	ldi	r30, 0x30	; 48
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    2a20:	89 81       	ldd	r24, Y+1	; 0x01

}
    2a22:	0f 90       	pop	r0
    2a24:	0f 90       	pop	r0
    2a26:	0f 90       	pop	r0
    2a28:	0f 90       	pop	r0
    2a2a:	cf 91       	pop	r28
    2a2c:	df 91       	pop	r29
    2a2e:	08 95       	ret

00002a30 <ADC_init>:
 * ADC Initialization
 * takes a structure of the configuration details
 * defining prescaler and reference voltage
 * set the channel to be zero by default
 */
void ADC_init(const ADC_ConfigType * a_configurations) {
    2a30:	df 93       	push	r29
    2a32:	cf 93       	push	r28
    2a34:	00 d0       	rcall	.+0      	; 0x2a36 <ADC_init+0x6>
    2a36:	cd b7       	in	r28, 0x3d	; 61
    2a38:	de b7       	in	r29, 0x3e	; 62
    2a3a:	9a 83       	std	Y+2, r25	; 0x02
    2a3c:	89 83       	std	Y+1, r24	; 0x01

	ADMUX = (a_configurations->ref_volt) << 6 ;
    2a3e:	a7 e2       	ldi	r26, 0x27	; 39
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	e9 81       	ldd	r30, Y+1	; 0x01
    2a44:	fa 81       	ldd	r31, Y+2	; 0x02
    2a46:	80 81       	ld	r24, Z
    2a48:	82 95       	swap	r24
    2a4a:	88 0f       	add	r24, r24
    2a4c:	88 0f       	add	r24, r24
    2a4e:	80 7c       	andi	r24, 0xC0	; 192
    2a50:	8c 93       	st	X, r24
	ADCSRA = ((ADCSRA & 0xF8) | a_configurations->prescaler) | 1<<ADEN;
    2a52:	a6 e2       	ldi	r26, 0x26	; 38
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	e6 e2       	ldi	r30, 0x26	; 38
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	80 81       	ld	r24, Z
    2a5c:	98 2f       	mov	r25, r24
    2a5e:	98 7f       	andi	r25, 0xF8	; 248
    2a60:	e9 81       	ldd	r30, Y+1	; 0x01
    2a62:	fa 81       	ldd	r31, Y+2	; 0x02
    2a64:	81 81       	ldd	r24, Z+1	; 0x01
    2a66:	89 2b       	or	r24, r25
    2a68:	80 68       	ori	r24, 0x80	; 128
    2a6a:	8c 93       	st	X, r24
}
    2a6c:	0f 90       	pop	r0
    2a6e:	0f 90       	pop	r0
    2a70:	cf 91       	pop	r28
    2a72:	df 91       	pop	r29
    2a74:	08 95       	ret

00002a76 <ADC_readChannel>:
 * reading the analog value on a certain channel
 * takes the number of the channel
 * waits until the controller converts the analog value to digital value
 * returns the digital value
 */
uint16 ADC_readChannel(uint8 a_channelNum) {
    2a76:	df 93       	push	r29
    2a78:	cf 93       	push	r28
    2a7a:	0f 92       	push	r0
    2a7c:	cd b7       	in	r28, 0x3d	; 61
    2a7e:	de b7       	in	r29, 0x3e	; 62
    2a80:	89 83       	std	Y+1, r24	; 0x01

	a_channelNum &= 0x1F;
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	8f 71       	andi	r24, 0x1F	; 31
    2a86:	89 83       	std	Y+1, r24	; 0x01

	ADMUX &= 0xE0;
    2a88:	a7 e2       	ldi	r26, 0x27	; 39
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	e7 e2       	ldi	r30, 0x27	; 39
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	80 81       	ld	r24, Z
    2a92:	80 7e       	andi	r24, 0xE0	; 224
    2a94:	8c 93       	st	X, r24

	ADMUX |= a_channelNum;
    2a96:	a7 e2       	ldi	r26, 0x27	; 39
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	e7 e2       	ldi	r30, 0x27	; 39
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	90 81       	ld	r25, Z
    2aa0:	89 81       	ldd	r24, Y+1	; 0x01
    2aa2:	89 2b       	or	r24, r25
    2aa4:	8c 93       	st	X, r24

	SET_BIT(ADCSRA, ADSC);
    2aa6:	a6 e2       	ldi	r26, 0x26	; 38
    2aa8:	b0 e0       	ldi	r27, 0x00	; 0
    2aaa:	e6 e2       	ldi	r30, 0x26	; 38
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	80 81       	ld	r24, Z
    2ab0:	80 64       	ori	r24, 0x40	; 64
    2ab2:	8c 93       	st	X, r24

	LOOP_UNTIL_BIT_IS_SET(ADCSRA, ADIF);
    2ab4:	e6 e2       	ldi	r30, 0x26	; 38
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	80 81       	ld	r24, Z
    2aba:	88 2f       	mov	r24, r24
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	80 71       	andi	r24, 0x10	; 16
    2ac0:	90 70       	andi	r25, 0x00	; 0
    2ac2:	00 97       	sbiw	r24, 0x00	; 0
    2ac4:	b9 f3       	breq	.-18     	; 0x2ab4 <ADC_readChannel+0x3e>

	SET_BIT(ADCSRA,ADIF);
    2ac6:	a6 e2       	ldi	r26, 0x26	; 38
    2ac8:	b0 e0       	ldi	r27, 0x00	; 0
    2aca:	e6 e2       	ldi	r30, 0x26	; 38
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	80 81       	ld	r24, Z
    2ad0:	80 61       	ori	r24, 0x10	; 16
    2ad2:	8c 93       	st	X, r24

	return ADC;
    2ad4:	e4 e2       	ldi	r30, 0x24	; 36
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	80 81       	ld	r24, Z
    2ada:	91 81       	ldd	r25, Z+1	; 0x01
}
    2adc:	0f 90       	pop	r0
    2ade:	cf 91       	pop	r28
    2ae0:	df 91       	pop	r29
    2ae2:	08 95       	ret

00002ae4 <main>:
#include "LCD/lcd.h"
#include "ADC/adc.h"
#include "LM35/lm35.h"
#include "Motor/motor.h"

int main(void) {
    2ae4:	df 93       	push	r29
    2ae6:	cf 93       	push	r28
    2ae8:	00 d0       	rcall	.+0      	; 0x2aea <main+0x6>
    2aea:	00 d0       	rcall	.+0      	; 0x2aec <main+0x8>
    2aec:	00 d0       	rcall	.+0      	; 0x2aee <main+0xa>
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62

	LCD_Init(); /* initializing lcd */
    2af2:	0e 94 59 08 	call	0x10b2	; 0x10b2 <LCD_Init>
	ADC_ConfigType configurations = { INTERNAL_VREF, F_CPU_8 }; /*define configurations for adc*/
    2af6:	83 e0       	ldi	r24, 0x03	; 3
    2af8:	8b 83       	std	Y+3, r24	; 0x03
    2afa:	83 e0       	ldi	r24, 0x03	; 3
    2afc:	8c 83       	std	Y+4, r24	; 0x04
	ADC_init(&configurations); /* initializing adc */
    2afe:	ce 01       	movw	r24, r28
    2b00:	03 96       	adiw	r24, 0x03	; 3
    2b02:	0e 94 18 15 	call	0x2a30	; 0x2a30 <ADC_init>
	DCMotor_init(); /* initializing motor */
    2b06:	0e 94 b4 07 	call	0xf68	; 0xf68 <DCMotor_init>
	uint8 temperature = LM35_getTemperature(); /*define variable for temperature and give it the initial temp*/
    2b0a:	0e 94 14 08 	call	0x1028	; 0x1028 <LM35_getTemperature>
    2b0e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 fanIsON = FALSE; /*defining a variable for fan state*/
    2b10:	19 82       	std	Y+1, r1	; 0x01
	LCD_SetCursor(0, 4);
    2b12:	80 e0       	ldi	r24, 0x00	; 0
    2b14:	64 e0       	ldi	r22, 0x04	; 4
    2b16:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <LCD_SetCursor>
	LCD_displayString("FAN is ");
    2b1a:	80 e6       	ldi	r24, 0x60	; 96
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <LCD_displayString>
	LCD_SetCursor(1, 4);
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	64 e0       	ldi	r22, 0x04	; 4
    2b26:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <LCD_SetCursor>
	LCD_displayString("TEMP = ");
    2b2a:	88 e6       	ldi	r24, 0x68	; 104
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <LCD_displayString>
	while (1) {
		/*read the temperature*/
		temperature = LM35_getTemperature();
    2b32:	0e 94 14 08 	call	0x1028	; 0x1028 <LM35_getTemperature>
    2b36:	8a 83       	std	Y+2, r24	; 0x02

		/*
		 * depending on temperature:
		 * the fan changes the speed
		 */
		if (temperature >= 90) {
    2b38:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3a:	8a 35       	cpi	r24, 0x5A	; 90
    2b3c:	38 f0       	brcs	.+14     	; 0x2b4c <main+0x68>
			fanIsON = TRUE;
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	89 83       	std	Y+1, r24	; 0x01
			DCMotor_rotate(CLOCK_WISE, MOTOR_THREE_QUARTERS_SPEED);
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	6b e4       	ldi	r22, 0x4B	; 75
    2b46:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DCMotor_rotate>
    2b4a:	19 c0       	rjmp	.+50     	; 0x2b7e <main+0x9a>
		} else if (temperature >= 60) {
    2b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4e:	8c 33       	cpi	r24, 0x3C	; 60
    2b50:	38 f0       	brcs	.+14     	; 0x2b60 <main+0x7c>
			fanIsON = TRUE;
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	89 83       	std	Y+1, r24	; 0x01
			DCMotor_rotate(CLOCK_WISE, MOTOR_HALF_SPEED);
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	62 e3       	ldi	r22, 0x32	; 50
    2b5a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DCMotor_rotate>
    2b5e:	0f c0       	rjmp	.+30     	; 0x2b7e <main+0x9a>
		} else if (temperature >= 30) {
    2b60:	8a 81       	ldd	r24, Y+2	; 0x02
    2b62:	8e 31       	cpi	r24, 0x1E	; 30
    2b64:	38 f0       	brcs	.+14     	; 0x2b74 <main+0x90>
			fanIsON = TRUE;
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	89 83       	std	Y+1, r24	; 0x01
			DCMotor_rotate(CLOCK_WISE, MOTOR_QUARTER_SPEED);
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	69 e1       	ldi	r22, 0x19	; 25
    2b6e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DCMotor_rotate>
    2b72:	05 c0       	rjmp	.+10     	; 0x2b7e <main+0x9a>
		} else {
			fanIsON = FALSE;
    2b74:	19 82       	std	Y+1, r1	; 0x01
			DCMotor_rotate(STOP, 0);
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	60 e0       	ldi	r22, 0x00	; 0
    2b7a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DCMotor_rotate>
		}
		/* displaying fan state*/
		LCD_SetCursor(0, 11);
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	6b e0       	ldi	r22, 0x0B	; 11
    2b82:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <LCD_SetCursor>
		LCD_displayString((fanIsON) ? "ON " : "OFF");
    2b86:	89 81       	ldd	r24, Y+1	; 0x01
    2b88:	88 23       	and	r24, r24
    2b8a:	29 f0       	breq	.+10     	; 0x2b96 <main+0xb2>
    2b8c:	80 e7       	ldi	r24, 0x70	; 112
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	9e 83       	std	Y+6, r25	; 0x06
    2b92:	8d 83       	std	Y+5, r24	; 0x05
    2b94:	04 c0       	rjmp	.+8      	; 0x2b9e <main+0xba>
    2b96:	84 e7       	ldi	r24, 0x74	; 116
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	9e 83       	std	Y+6, r25	; 0x06
    2b9c:	8d 83       	std	Y+5, r24	; 0x05
    2b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba2:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <LCD_displayString>
		/*displaying temperature*/
		LCD_SetCursor(1, 11);
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	6b e0       	ldi	r22, 0x0B	; 11
    2baa:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <LCD_SetCursor>
		LCD_PrintNum16Bit(temperature);
    2bae:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb0:	88 2f       	mov	r24, r24
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	0e 94 28 10 	call	0x2050	; 0x2050 <LCD_PrintNum16Bit>
		LCD_displayString(" C  ");
    2bb8:	88 e7       	ldi	r24, 0x78	; 120
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <LCD_displayString>
    2bc0:	b8 cf       	rjmp	.-144    	; 0x2b32 <main+0x4e>

00002bc2 <__mulsi3>:
    2bc2:	62 9f       	mul	r22, r18
    2bc4:	d0 01       	movw	r26, r0
    2bc6:	73 9f       	mul	r23, r19
    2bc8:	f0 01       	movw	r30, r0
    2bca:	82 9f       	mul	r24, r18
    2bcc:	e0 0d       	add	r30, r0
    2bce:	f1 1d       	adc	r31, r1
    2bd0:	64 9f       	mul	r22, r20
    2bd2:	e0 0d       	add	r30, r0
    2bd4:	f1 1d       	adc	r31, r1
    2bd6:	92 9f       	mul	r25, r18
    2bd8:	f0 0d       	add	r31, r0
    2bda:	83 9f       	mul	r24, r19
    2bdc:	f0 0d       	add	r31, r0
    2bde:	74 9f       	mul	r23, r20
    2be0:	f0 0d       	add	r31, r0
    2be2:	65 9f       	mul	r22, r21
    2be4:	f0 0d       	add	r31, r0
    2be6:	99 27       	eor	r25, r25
    2be8:	72 9f       	mul	r23, r18
    2bea:	b0 0d       	add	r27, r0
    2bec:	e1 1d       	adc	r30, r1
    2bee:	f9 1f       	adc	r31, r25
    2bf0:	63 9f       	mul	r22, r19
    2bf2:	b0 0d       	add	r27, r0
    2bf4:	e1 1d       	adc	r30, r1
    2bf6:	f9 1f       	adc	r31, r25
    2bf8:	bd 01       	movw	r22, r26
    2bfa:	cf 01       	movw	r24, r30
    2bfc:	11 24       	eor	r1, r1
    2bfe:	08 95       	ret

00002c00 <__udivmodhi4>:
    2c00:	aa 1b       	sub	r26, r26
    2c02:	bb 1b       	sub	r27, r27
    2c04:	51 e1       	ldi	r21, 0x11	; 17
    2c06:	07 c0       	rjmp	.+14     	; 0x2c16 <__udivmodhi4_ep>

00002c08 <__udivmodhi4_loop>:
    2c08:	aa 1f       	adc	r26, r26
    2c0a:	bb 1f       	adc	r27, r27
    2c0c:	a6 17       	cp	r26, r22
    2c0e:	b7 07       	cpc	r27, r23
    2c10:	10 f0       	brcs	.+4      	; 0x2c16 <__udivmodhi4_ep>
    2c12:	a6 1b       	sub	r26, r22
    2c14:	b7 0b       	sbc	r27, r23

00002c16 <__udivmodhi4_ep>:
    2c16:	88 1f       	adc	r24, r24
    2c18:	99 1f       	adc	r25, r25
    2c1a:	5a 95       	dec	r21
    2c1c:	a9 f7       	brne	.-22     	; 0x2c08 <__udivmodhi4_loop>
    2c1e:	80 95       	com	r24
    2c20:	90 95       	com	r25
    2c22:	bc 01       	movw	r22, r24
    2c24:	cd 01       	movw	r24, r26
    2c26:	08 95       	ret

00002c28 <__divmodsi4>:
    2c28:	97 fb       	bst	r25, 7
    2c2a:	09 2e       	mov	r0, r25
    2c2c:	05 26       	eor	r0, r21
    2c2e:	0e d0       	rcall	.+28     	; 0x2c4c <__divmodsi4_neg1>
    2c30:	57 fd       	sbrc	r21, 7
    2c32:	04 d0       	rcall	.+8      	; 0x2c3c <__divmodsi4_neg2>
    2c34:	14 d0       	rcall	.+40     	; 0x2c5e <__udivmodsi4>
    2c36:	0a d0       	rcall	.+20     	; 0x2c4c <__divmodsi4_neg1>
    2c38:	00 1c       	adc	r0, r0
    2c3a:	38 f4       	brcc	.+14     	; 0x2c4a <__divmodsi4_exit>

00002c3c <__divmodsi4_neg2>:
    2c3c:	50 95       	com	r21
    2c3e:	40 95       	com	r20
    2c40:	30 95       	com	r19
    2c42:	21 95       	neg	r18
    2c44:	3f 4f       	sbci	r19, 0xFF	; 255
    2c46:	4f 4f       	sbci	r20, 0xFF	; 255
    2c48:	5f 4f       	sbci	r21, 0xFF	; 255

00002c4a <__divmodsi4_exit>:
    2c4a:	08 95       	ret

00002c4c <__divmodsi4_neg1>:
    2c4c:	f6 f7       	brtc	.-4      	; 0x2c4a <__divmodsi4_exit>
    2c4e:	90 95       	com	r25
    2c50:	80 95       	com	r24
    2c52:	70 95       	com	r23
    2c54:	61 95       	neg	r22
    2c56:	7f 4f       	sbci	r23, 0xFF	; 255
    2c58:	8f 4f       	sbci	r24, 0xFF	; 255
    2c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c5c:	08 95       	ret

00002c5e <__udivmodsi4>:
    2c5e:	a1 e2       	ldi	r26, 0x21	; 33
    2c60:	1a 2e       	mov	r1, r26
    2c62:	aa 1b       	sub	r26, r26
    2c64:	bb 1b       	sub	r27, r27
    2c66:	fd 01       	movw	r30, r26
    2c68:	0d c0       	rjmp	.+26     	; 0x2c84 <__udivmodsi4_ep>

00002c6a <__udivmodsi4_loop>:
    2c6a:	aa 1f       	adc	r26, r26
    2c6c:	bb 1f       	adc	r27, r27
    2c6e:	ee 1f       	adc	r30, r30
    2c70:	ff 1f       	adc	r31, r31
    2c72:	a2 17       	cp	r26, r18
    2c74:	b3 07       	cpc	r27, r19
    2c76:	e4 07       	cpc	r30, r20
    2c78:	f5 07       	cpc	r31, r21
    2c7a:	20 f0       	brcs	.+8      	; 0x2c84 <__udivmodsi4_ep>
    2c7c:	a2 1b       	sub	r26, r18
    2c7e:	b3 0b       	sbc	r27, r19
    2c80:	e4 0b       	sbc	r30, r20
    2c82:	f5 0b       	sbc	r31, r21

00002c84 <__udivmodsi4_ep>:
    2c84:	66 1f       	adc	r22, r22
    2c86:	77 1f       	adc	r23, r23
    2c88:	88 1f       	adc	r24, r24
    2c8a:	99 1f       	adc	r25, r25
    2c8c:	1a 94       	dec	r1
    2c8e:	69 f7       	brne	.-38     	; 0x2c6a <__udivmodsi4_loop>
    2c90:	60 95       	com	r22
    2c92:	70 95       	com	r23
    2c94:	80 95       	com	r24
    2c96:	90 95       	com	r25
    2c98:	9b 01       	movw	r18, r22
    2c9a:	ac 01       	movw	r20, r24
    2c9c:	bd 01       	movw	r22, r26
    2c9e:	cf 01       	movw	r24, r30
    2ca0:	08 95       	ret

00002ca2 <__prologue_saves__>:
    2ca2:	2f 92       	push	r2
    2ca4:	3f 92       	push	r3
    2ca6:	4f 92       	push	r4
    2ca8:	5f 92       	push	r5
    2caa:	6f 92       	push	r6
    2cac:	7f 92       	push	r7
    2cae:	8f 92       	push	r8
    2cb0:	9f 92       	push	r9
    2cb2:	af 92       	push	r10
    2cb4:	bf 92       	push	r11
    2cb6:	cf 92       	push	r12
    2cb8:	df 92       	push	r13
    2cba:	ef 92       	push	r14
    2cbc:	ff 92       	push	r15
    2cbe:	0f 93       	push	r16
    2cc0:	1f 93       	push	r17
    2cc2:	cf 93       	push	r28
    2cc4:	df 93       	push	r29
    2cc6:	cd b7       	in	r28, 0x3d	; 61
    2cc8:	de b7       	in	r29, 0x3e	; 62
    2cca:	ca 1b       	sub	r28, r26
    2ccc:	db 0b       	sbc	r29, r27
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	f8 94       	cli
    2cd2:	de bf       	out	0x3e, r29	; 62
    2cd4:	0f be       	out	0x3f, r0	; 63
    2cd6:	cd bf       	out	0x3d, r28	; 61
    2cd8:	09 94       	ijmp

00002cda <__epilogue_restores__>:
    2cda:	2a 88       	ldd	r2, Y+18	; 0x12
    2cdc:	39 88       	ldd	r3, Y+17	; 0x11
    2cde:	48 88       	ldd	r4, Y+16	; 0x10
    2ce0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ce2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ce4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ce6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ce8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2cea:	aa 84       	ldd	r10, Y+10	; 0x0a
    2cec:	b9 84       	ldd	r11, Y+9	; 0x09
    2cee:	c8 84       	ldd	r12, Y+8	; 0x08
    2cf0:	df 80       	ldd	r13, Y+7	; 0x07
    2cf2:	ee 80       	ldd	r14, Y+6	; 0x06
    2cf4:	fd 80       	ldd	r15, Y+5	; 0x05
    2cf6:	0c 81       	ldd	r16, Y+4	; 0x04
    2cf8:	1b 81       	ldd	r17, Y+3	; 0x03
    2cfa:	aa 81       	ldd	r26, Y+2	; 0x02
    2cfc:	b9 81       	ldd	r27, Y+1	; 0x01
    2cfe:	ce 0f       	add	r28, r30
    2d00:	d1 1d       	adc	r29, r1
    2d02:	0f b6       	in	r0, 0x3f	; 63
    2d04:	f8 94       	cli
    2d06:	de bf       	out	0x3e, r29	; 62
    2d08:	0f be       	out	0x3f, r0	; 63
    2d0a:	cd bf       	out	0x3d, r28	; 61
    2d0c:	ed 01       	movw	r28, r26
    2d0e:	08 95       	ret

00002d10 <_exit>:
    2d10:	f8 94       	cli

00002d12 <__stop_program>:
    2d12:	ff cf       	rjmp	.-2      	; 0x2d12 <__stop_program>
